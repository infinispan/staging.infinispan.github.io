<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://infinispan.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://infinispan.org/" rel="alternate" type="text/html" /><updated>2024-05-08T12:05:06+02:00</updated><id>https://infinispan.org/feed.xml</id><title type="html">Infinispan</title><subtitle>Infinispan is a distributed in-memory key/value data store with optional schema, available under the Apache License 2.0.</subtitle><entry><title type="html">Infinispan 15.0.3.Final</title><link href="https://infinispan.org/blog/2024/05/08/infinispan-15" rel="alternate" type="text/html" title="Infinispan 15.0.3.Final" /><published>2024-05-08T02:00:00+02:00</published><updated>2024-05-08T02:00:00+02:00</updated><id>https://infinispan.org/blog/2024/05/08/infinispan-15.0.3.Final</id><content type="html" xml:base="https://infinispan.org/blog/2024/05/08/infinispan-15"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Since our 15 release a couple of months ago, we&#8217;ve been busy fixing bugs and adding new functionality. This post highlights the most notable enhancements:</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="protocol-buffers-compatibility-checks">Protocol Buffers compatibility checks</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When uploading new versions of existing schemas to Infinispan, these will be validated using a set of backwards-compatibility rules based upon <a href="https://protobuf.dev/programming-guides/dos-donts/">Proto Best Practices</a>.
The types of checks can be configured via the <code>schema-compatibility</code> attribute of the global <code>serialization</code> configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;infinispan&gt;
   &lt;serialization schema-compatibility="UNRESTRICTED|LENIENT|STRICT"/&gt;
&lt;/infinispan&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The available levels are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>UNRESTRICTED</code>: no checks are performed</p>
</li>
<li>
<p><code>LENIENT</code>: a subset of the rules are enforced</p>
</li>
<li>
<p><code>STRICT</code>: all the rules are enforced (default)</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="http-compressiondecompression">HTTP compression/decompression</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The REST endpoint has supported compressing responses since Infinispan 10, but now it also supports receiving compressed requests using the standard HTTP <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding"><code>content-encoding</code> header</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="queryindex-by-key">Query/index by key</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Entry keys can now be indexed and referenced in Ickle queries:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">select s.key.column from model.Structure s where s.key.zone = 'z7'</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="filtering-in-vector-search">Filtering in Vector search</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It&#8217;s now possible to limit vector searches by applying predicates to the kNN queries:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Query&lt;Object[]&gt; query = remoteCache.query(
   "select score(i), i from Item i where i.floatVector &lt;-&gt; [:a]~:k filtering (i.buggy : 'cat' or i.text : 'code')");
query.setParameter("a", new float[]{7, 7, 7});
query.setParameter("k", 3);</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="more-detailed-metrics">More detailed metrics</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Metrics for reads/writes are now split into the following categories:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>primary owner</p>
</li>
<li>
<p>backup owner</p>
</li>
<li>
<p>non-owner</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Additionally, transaction operations (prepare, commit and rollback) now have their own metrics for counts and response times.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cache-aliases">Cache aliases</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Caches can now have aliases associated with them, so a cache may be accessed either by its primary name or one of its aliases.
The <code>aliases</code> attribute can be manipulated at runtime using the CLI or the REST API, so you can reassign aliases to different caches.
With this functionality it is possible to implement cache snapshots. Given the following configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;caches&gt;
    &lt;distributed-cache name="snapshot1" aliases="data" /&gt;
    &lt;distributed-cache name="snapshot2"/&gt;
&lt;/caches&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Clients could be accessing an older snapshot through the <code>data</code> alias, while the other snapshot is being populated. Once the new snapshot cache is ready, reassign the <code>data</code> alias to it and clients will automatically <strong>see</strong> the new data.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="redis-protocol">Redis protocol</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Infinispan can now support multiple Redis <strong>databases</strong>, even in clustered mode (something that the original Redis cannot do). You can use the cache alias feature to
assign logical database <strong>numbers</strong> to named caches.</p>
</div>
<div class="paragraph">
<p>We&#8217;ve also implemented a few more Redis commands:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>BLMPOP</code></p>
</li>
<li>
<p><code>DB</code></p>
</li>
<li>
<p><code>HSTRLEN</code></p>
</li>
<li>
<p><code>PUBSUB</code></p>
</li>
<li>
<p><code>PUBSUB NUMPAT</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>as well as fixing a number of buglets in other commands.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="reactive-methods-for-spring-cache">Reactive methods for Spring Cache</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Spring Cache (<code>retrieve</code>) methods have been implemented.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jdbc_ping-and-datasources">JDBC_PING and datasources</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Infinispan server can now inject a managed datasource into the <code>JDBC_PING</code> protocol:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;cache-container&gt;
    &lt;transport stack="jdbc" server:data-source="ds" /&gt;
&lt;/cache-container&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="removal-of-openssl">Removal of OpenSSL</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Infinispan server no longer ships with the OpenSSL wrapper: the performance of the JDK&#8217;s SSLEngine has been vastly improved in Java 17 to the point where there is no noticeable difference (and in some cases it is slightly faster, since it no longer needs to jump over JNI).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="documentation">Documentation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Many improvements, updates and fixes.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="release-notes">Release notes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can look at the <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;version=12377084">release notes</a> to see what has changed since our latest CR.</p>
</div>
<div class="paragraph">
<p>Get them from our <a href="https://infinispan.org/download/">download page</a>.</p>
</div>
</div>
</div>]]></content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="final" /><summary type="html"><![CDATA[Since our 15 release a couple of months ago, we&#8217;ve been busy fixing bugs and adding new functionality. This post highlights the most notable enhancements:]]></summary></entry><entry><title type="html">Infinispan at Devoxx France 2024</title><link href="https://infinispan.org/blog/2024/04/29/infinispan-devoxx-france" rel="alternate" type="text/html" title="Infinispan at Devoxx France 2024" /><published>2024-04-29T02:00:00+02:00</published><updated>2024-04-29T02:00:00+02:00</updated><id>https://infinispan.org/blog/2024/04/29/back-from-devoxx</id><content type="html" xml:base="https://infinispan.org/blog/2024/04/29/infinispan-devoxx-france"><![CDATA[<div class="sect1">
<h2 id="infinispan-15-in-devoxx-france">Infinispan 15 in Devoxx France</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This month we participated in one of the biggest developers conference in Europe: Devoxx France in Paris.</p>
</div>
<div class="paragraph">
<p>Infinispan did not have a specific talk, however it was present indirectly in two talks:</p>
</div>
<div class="sect2">
<h3 id="highly-available-identity-and-access-management-with-multi-site-keycloak-deployments-in-the-cloud">Highly available Identity and Access Management with multi-site Keycloak deployments in the cloud</h3>
<div class="sect3">
<h4 id="abstract">Abstract</h4>
<div class="paragraph">
<p>A single sign on solution for your customers and employees shouldn&#8217;t be a single-point-of-failure in
your architecture. Keycloak, a popular Open Source Identity and Access Management
solution that provides single sign on, amongst other capabilities, is no exception
to this.
A clustered Keycloak deployment in a single site or datacenter provides sufficient
availability for many. An increasing number of organizations need to utilize multiple
sites for improved resiliency or to meet legal requirements. In 2023, Keycloak
overhauled its multi-site capabilities for public cloud infrastructures, tested them
thoroughly and provided deployment blueprints to the community. They show how to set
up an AWS infrastructure and deploy Keycloak across multiple sites.
This talk presents, from an architects and developer perspective, how we approached
the problem, which architecture we chose, the challenges we faced and which tools
helped us along the way. Expect to dive into concepts like load shedding, cache stampedes, and automated failover. See tools like Gatling, Helm, OpenTelemetry, Kubernetes Operators and AWS infrastructure in action. We will also provide an outlook for the next steps in our journey.
These insights will help you to improve your Keycloak deployments as well as design
and test your own applications so they can withstand high load and site failures.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-devoxx-france/keycloak2.jpg"><img src="/assets/images/blog/2024-devoxx-france/keycloak2.jpg" alt="Keycloak"></a>
</div>
</div>
</div>
<div class="sect3">
<h4 id="infinispan">Infinispan</h4>
<div class="paragraph">
<p>During this presentation, Alexander Schwartz and Ryan Emerson delve into the latest
version of Keycloak and the High Availability architecture that facilitates deploying
two sites with Keycloak.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-devoxx-france/keycloak1.jpg"><img src="/assets/images/blog/2024-devoxx-france/keycloak1.jpg" alt="Keycloak"></a>
</div>
</div>
<div class="paragraph">
<p>A key component enabling this architecture is the
Infinispan Server, with its Cross-Site replication capabilities.</p>
</div>
<div class="paragraph">
<p>This capability is used to provide Active-Passive replication, however the roadmap includes
plans for Active-Active replication in the near future.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-devoxx-france/keycloak-infinispan.png"><img src="/assets/images/blog/2024-devoxx-france/keycloak-infinispan.png" alt="Keycloak HA Architecture"></a>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="hibernate-search-7-new-features-and-practical-cases-of-java-full-text-and-vector-search">Hibernate Search 7: New Features and Practical Cases of Java Full-Text and Vector Search</h3>
<div class="sect3">
<h4 id="abstract-2">Abstract</h4>
<div class="paragraph">
<p>Hibernate Search 7.0 was released in late 2023, and version 7.1 is already available.
Discover all the new features of this latest version and practical use cases such as
vectorial search (kNN), which enables the implementation of textual, audio, or
image-based machine learning search. This conference will guide you through the
underlying changes, demonstrate concrete use cases, and provide practical tips to make
the most of the latest version of this essential library for data persistence and
full-text search in the Java ecosystem.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-devoxx-france/hibernateSearch1.jpg"><img src="/assets/images/blog/2024-devoxx-france/hibernateSearch1.jpg" alt="Hibernate Search"></a>
</div>
</div>
</div>
<div class="sect3">
<h4 id="infinispan-2">Infinispan</h4>
<div class="paragraph">
<p>In the talk, Infinispan was mentioned to highlight that Hibernate Search can function as
a standalone component in a Java Application, independent of Hibernate ORM.
Infinispan utilizes the Hibernate Search library to implement Full-Text search over
cache values. Moreover, since Infinispan 15.0, it can be used as an embedding store to
execute vector search with Langchain and Langchain4j.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-devoxx-france/hibernateSearch2.jpg"><img src="/assets/images/blog/2024-devoxx-france/hibernateSearch2.jpg" alt="Hibernate Search"></a>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="les-cast-codeurs-podcast">Les Cast Codeurs Podcast</h3>
<div class="paragraph">
<p>Mentioning here that Infinispan is indirectly part of Devoxx France and the Les Cast Codeurs podcast too.
(I am, Katia Aresti, part of the Red Coat team and Les Cast Codeurs Podcast with Emmanuel Bernard,
Antonio Goncalves, Guillaume Laforge and Arnaud Heritier).</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-devoxx-france/castcodeurs.jpg"><img src="/assets/images/blog/2024-devoxx-france/castcodeurs.jpg" alt="LCC"></a>
</div>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-devoxx-france/redcoats.jpg"><img src="/assets/images/blog/2024-devoxx-france/redcoats.jpg" alt="Red Coats"></a>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="whats-next">What&#8217;s next</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quarkus and Infinispan integration has undergone significant updates.
Stay tuned for the latest developments by following Quarkus and Infinispan updates.
We&#8217;ll be participating soon in a Quarkus Insights recording, so keep an eye out for that.</p>
</div>
<div class="paragraph">
<p>Additionally, this summer, we&#8217;ll be attending <a href="https://rivieradev.fr/">RivieraDev</a>.
Let&#8217;s connect and catch up over there!</p>
</div>
</div>
</div>]]></content><author><name>Katia Aresti</name></author><category term="conferences" /><category term="java" /><category term="devoxx" /><category term="devoxxfr" /><summary type="html"><![CDATA[Infinispan 15 in Devoxx France]]></summary></entry><entry><title type="html">Infinispan 15 tracing news</title><link href="https://infinispan.org/blog/2024/04/05/infinispan-15-tracing" rel="alternate" type="text/html" title="Infinispan 15 tracing news" /><published>2024-04-05T02:00:00+02:00</published><updated>2024-04-05T02:00:00+02:00</updated><id>https://infinispan.org/blog/2024/04/05/infinispan-15-tracing</id><content type="html" xml:base="https://infinispan.org/blog/2024/04/05/infinispan-15-tracing"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In the previous version of Infinispan <a href="https://infinispan.org/blog/2022/07/18/infinispan-14-opentelemetry-tracing">we introduced the OpenTelemetry Tracing capability</a>.
With the new version we evolved the integration in order to:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>configure it both globally and per-cach using the standard Infinispan configuration.</p>
</li>
<li>
<p>trace more event types: cluster, cross-site, cache-store and security.</p>
</li>
<li>
<p>select and configure, even at runtime, the span types that we want to produce and send to the collector.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The source code featured in this blog post has been taken from <a href="https://github.com/fax4ever/infinispan-demo/tree/main/infinispan-15-tracing">this demo project</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="configure-tracing">Configure tracing</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="global-configuration">Global configuration</h3>
<div class="paragraph">
<p>We enable tracing globally by defining a <code>collector-endpoint</code> as usual. Instead of relying on a system property,
we can now do it directly in the Infinispan Server Configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;infinispan xmlns:server="urn:infinispan:server:15.0"&gt;
   &lt;cache-container name="default"&gt;
      &lt;tracing collector-endpoint="http://jaeger-collector.infinispan-15-tracing.svc.cluster.local:4318" security="true" service-name="infinispan-service-tracing" /&gt;
   &lt;/cache-container&gt;
&lt;/infinispan&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>By default, we now support tracing using the OpenTelemetry Protocol (OTLP) with the default exporter protocol as <code>http/protobuf</code>, instead of <code>grpc</code>.
The default Jaeger port using this combination is the <code>4318</code>.</p>
</div>
<div class="paragraph">
<p>We&#8217;ve also activated tracing for security audits. This is a new tracing category introduced with Infinispan 15, and it&#8217;s defined at the cache manager level.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">infinispan:
 cacheContainer:
   tracing:
     collector-endpoint: "http://jaeger-collector.infinispan-15-tracing.svc.cluster.local:4318"
     service-name: infinispan-service-tracing
     security: true</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cache-configuration">Cache configuration</h3>
<div class="paragraph">
<p>Cache-scoped tracing categories must be configured in the cache configuration.
Here&#8217;s an example of a cache configuration that enables tracing for additional categories:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">replicatedCache:
  encoding:
    key:
      mediaType: "application/x-protostream"
    value:
      mediaType: "application/x-protostream"
  indexing:
    enabled: "true"
    storage: "local-heap"
    startupMode: "NONE"
    indexedEntities:
      - "fax.play.image"
  tracing:
    enabled: true
    categories:
      - "container"
      - "persistence"
      - "cluster"
      - "x-site"</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above example, <code>container</code>, <code>persistence</code>, <code>cluster</code> and <code>x-site</code> (cross-site replication) are enabled.
In the absence of category specification, <code>container</code> tracing is enabled by default.</p>
</div>
<div class="sect3">
<h4 id="runtime-operations">Runtime operations</h4>
<div class="paragraph">
<p>Furthermore, it is possible to enable / disable tracing categories, or even the entire tracing subsystem at runtime, using either the Hot Rod client or the REST API.</p>
</div>
<div class="paragraph">
<p>The following example enables tracing for the <code>container</code> and <code>persistence</code> categories while disabling any other previously enabled categories:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Set&lt;String&gt; enabledCategories = Set.of("container", "persistence");
cacheManager.administration()
   .updateConfigurationAttribute(cache.getName(), "tracing.categories", String.join(",", enabledCategories));</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="tracing-in-action">Tracing in action</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Now that we have the setup. Let&#8217;s see some example of tracing in action.
If we open the Jaeger console we can see immediately some security audit events logged.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/tracing-15-01-security-audit.png"><img src="/assets/images/blog/tracing-15-01-security-audit.png" alt="Tracing output"></a>
</div>
</div>
<div class="paragraph">
<p>At startup, only container tracing is enabled.
After some interaction, we might see a log similar to the following:</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/tracing-15-02-container.png"><img src="/assets/images/blog/tracing-15-02-container.png" alt="Tracing output"></a>
</div>
</div>
<div class="paragraph">
<p>We have the client&#8217;s span and its matching container-level span on the server.</p>
</div>
<div class="paragraph">
<p>Enable more span categories to gain further insights into Infinispan&#8217;s internal operations.</p>
</div>
<div class="paragraph">
<p>In our demo we initially enable the persistence category at runtime. After some interactions from the client,
we can observe the internal calls that Infinispan makes to interact with the configured cache store.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/tracing-15-03-persistence.png"><img src="/assets/images/blog/tracing-15-03-persistence.png" alt="Tracing output"></a>
</div>
</div>
<div class="paragraph">
<p>Afterwards, we enable (also at runtime) the cluster category. After the first interaction,
it&#8217;s possible to observe the call that the Infinispan Server makes to synchronize the cluster alignment.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/tracing-15-04-cluster.png"><img src="/assets/images/blog/tracing-15-04-cluster.png" alt="Tracing output"></a>
</div>
</div>
<div class="paragraph">
<p>For more information, read the documentation guide:
<a href="https://infinispan.org/docs/stable/titles/server/server.html#opentelemetry-tracing">Enabling and configuring Infinispan OpenTelemetry tracing</a>.</p>
</div>
</div>
</div>]]></content><author><name>Fabio Massimo Ercoli</name></author><category term="opentelemetry" /><category term="tracing" /><summary type="html"><![CDATA[In the previous version of Infinispan we introduced the OpenTelemetry Tracing capability. With the new version we evolved the integration in order to:]]></summary></entry><entry><title type="html">Infinispan Operator 2.4.0</title><link href="https://infinispan.org/blog/2024/03/20/infinispan-resp-resque-use-case" rel="alternate" type="text/html" title="Infinispan Operator 2.4.0" /><published>2024-03-20T01:00:00+01:00</published><updated>2024-03-20T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/03/20/infinispan-operator-2-4-0-release</id><content type="html" xml:base="https://infinispan.org/blog/2024/03/20/infinispan-resp-resque-use-case"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>We&#8217;re pleased to announce
<a href="https://operatorhub.io/operator/infinispan/stable/infinispan-operator.v2.4.0">version 2.4.0 of the Infinispan Operator</a>
for Kubernetes and Red Hat OpenShift.</p>
</div>
<div class="paragraph">
<p>This is the first Operator release based on Infinispan 15.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="release-highlights">Release highlights:</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Infinispan 14.0.27.Final support</p>
</li>
<li>
<p>Infinispan 15.0.0.Final support</p>
</li>
<li>
<p>Allow Readiness, Liveness and Startup probe values to be configured</p>
</li>
<li>
<p>Simplify JGroups configuration to use "Kubernetes" stack provided by Infinispan server</p>
</li>
<li>
<p>CloudEvents integration no longer has any effect with 15.0.x servers onwards</p>
</li>
<li>
<p>Cross-Site Replication (XSite) improvements:</p>
<div class="ulist">
<ul>
<li>
<p>Use TLSv1.3 as default</p>
</li>
<li>
<p>TLS client authentication by default</p>
</li>
<li>
<p>Configure Gossip Route idle connection timeout</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="operatorhub-channel">OperatorHub Channel</h2>
<div class="sectionbody">
<div class="paragraph">
<p>From this release onwards all Infinispan Operator releases will be added to the "stable" channel. Please transition from
the "2.3.x" Subscription channel to "stable" in order to consume 2.4.0.</p>
</div>
<div class="paragraph">
<p>Our intention is to continue our current versioning scheme, whereby the Operator minor version is incremented when support
for a new Infinispan major version is added. However, to simplify upgrades, all future Operator releases will be added to
the "stable" channel, instead of <code>x.y.z</code>, so that it&#8217;s no longer necessary for the Subscription channel to be changed when
upgrading.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="infinispan-server-support">Infinispan Server Support</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Future 2.4.x Operator releases will include the latest releases for both the 15.0.x and 14.0.x Infinispan server streams.
While we always recommend users to transition to the latest Infinispan major version as soon as possible, supporting both
server streams in the Operator will provided additional flexibility those depending on Infinispan as part of a 3rd party
integration, e.g. Keycloak users.</p>
</div>
</div>
</div>]]></content><author><name>Ryan Emerson</name></author><category term="release" /><category term="operator" /><category term="kubernetes" /><summary type="html"><![CDATA[We&#8217;re pleased to announce version 2.4.0 of the Infinispan Operator for Kubernetes and Red Hat OpenShift.]]></summary></entry><entry><title type="html">Infinispan 15.0.0.Final</title><link href="https://infinispan.org/blog/2024/03/13/infinispan-15" rel="alternate" type="text/html" title="Infinispan 15.0.0.Final" /><published>2024-03-13T01:00:00+01:00</published><updated>2024-03-13T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/03/13/infinispan-15.0.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2024/03/13/infinispan-15"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Don&#8217;t you know I&#8217;m still standin' better than I ever did?
Lookin' like a true survivor, feelin' like a little kid</p>
</div>
<div class="paragraph">
<p>Those lyrics certainly apply to our newest, and best, release: Infinispan 15, which continues to improve on its mature foundation, and yet packs fun new features, just like a little kid.
And in our grand tradition of codenames based on beers, this one <a href="https://untappd.com/b/delphic-brewing-company-i-m-still-standing/3572608">is no exception</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/images/blog/im-still-standing.jpg" alt="I&#8217;m Still Standing" width="1000" height="891">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jdk-requirements">JDK requirements</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You will need at least JDK 17 in order to use Infinispan 15. Infinispan also supports JDK 21 and the soon-to-be-released JDK 22.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jakarta-ee">Jakarta EE</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Since we&#8217;ve completely embraced JDK 17, we now only ship <a href="https://jakarta.ee">Jakarta EE</a>-compatible modules. If you want to keep on using Java EE, you will have to stay
on Infinispan 14, which is still supported.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="redis-protocol">Redis protocol</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Infinispan Server now comes with a Redis protocol (RESP) connector. We implement over 90 commands from Redis OSS, including most data types (strings, sets, sorted sets, lists, hashes, pubsub). Why would you want to use Infinispan instead of Redis ? Just some things:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>multi-threaded: take advantage of multiple cores without resorting to clustering</p>
</li>
<li>
<p>P2P clustering: all members of a cluster are of the same kind. You don’t need to worry about writing to masters, reading from replicas: it’s all the same! Elastically add/remove nodes at runtime to increase/decrease capacity as required by your workload: Infinispan will rebalance the data to ensure that your redundancy settings are respected.</p>
</li>
<li>
<p>multiple caches with dedicated configuration: divide your data in different namespaces, possibly with different expiration, eviction, persistence rules. And it also works in a cluster, unlike Redis Cluster.</p>
</li>
<li>
<p>cross-site replication: work with 2 or more sites</p>
</li>
<li>
<p>multiple persistence options: store your data on disk, in a database or in another external store. You can even write your own to implement true inline caching instead of side-caching to reduce your overall latency.</p>
</li>
<li>
<p>integration with external identity providers: authenticate/authorize with OAuth2, LDAP, Kerberos, client certificates.</p>
</li>
<li>
<p>full pipeline inbound process handling allows for even greater batched throughput</p>
</li>
<li>
<p>a mature, open-source Kubernetes Operator which supports provisioning, scaling, persistence, and integration with enterprise security.</p>
</li>
<li>
<p>lots more!</p>
</li>
<li>
<p>and everything is available under the ASL 2.0, so you don’t have to worry about features being locked behind restrictive licenses.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The Redis connector is exposed via our single-port: we automatically detect RESP clients on connection!</p>
</div>
<div class="paragraph">
<p>We even made a <a href="https://www.youtube.com/watch?v=Xi9gTA0jfD0">video</a> highlighting some cool things!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="vector-indexes">Vector indexes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Infinispan now supports distributed vector indexes and KNN queries.
They are expressed in Ickle (SQL-like) syntax using the special operator <code>&lt;&#8594;</code>. For instance:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Query&lt;Item&gt; query = cache.query("from Item i where i.byteVector &lt;-&gt; [7,6,7]~3");</code></pre>
</div>
</div>
<div class="paragraph">
<p>Vector parameters can be passed in different ways.
As an entire entity:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">query = cache.query("from model.Item i where i.byteVector &lt;-&gt; [:a]~:b");
query.setParameter("a", new byte[]{7, 6, 7});
query.setParameter("b", 3);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or using a placeholder for each cell:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">query = cache.query("from model.Item i where i.floatVector &lt;-&gt; [:a,:b,:c]~:d");
query.setParameter("a", 1);
query.setParameter("b", 4.3);
query.setParameter("c", 3.3);
query.setParameter("d", 4);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Both float vectors and byte vectors are supported.</p>
</div>
<div class="paragraph">
<p>Infinispan can be easily integrated into a Python Langchain application as a vector store for semantic search or even in a chain: the picture below shows a QA chain in action.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/images/blog/vector-search-relnotes.gif" alt="Infinispan VectorStore" width="640" height="480">
</div>
</div>
<div class="paragraph">
<p>See <a href="https://python.langchain.com/docs/integrations/vectorstores/infinispanvs">Infinispan VectorStore</a> and <a href="https://github.com/infinispan-demos/infinispan-langchain-demo">Infinispan Langchain demo</a> for more examples.</p>
</div>
<div class="paragraph">
<p>Infinispan is also part of <a href="https://github.com/langchain4j/langchain4j">Langchain4j</a>, thus the <a href="https://docs.quarkiverse.io/quarkus-langchain4j/dev/infinispan-store.html">Quarkus Langchain4j</a> quarkiverse extension.
It can be used as an <a href="https://docs.langchain4j.dev/integrations/embedding-stores/infinispan">embedding store</a> thanks to the support added to vector search.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="query">Query</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We finally made it easy to execute queries directly from the cache API, instead of having to go through the Search/QueryFactory combination:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Query&lt;Image&gt; query = cache.query("from play.image where moment between :from and :to order by moment desc");
query.setParameter("from", fromDate);
query.setParameter("to", toDate);</code></pre>
</div>
</div>
<div class="paragraph">
<p>The query result object evolved to provide accurate information about the hit count.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">QueryResult&lt;Game&gt; result = query.execute();
HitCount hitCount = result.count();
hitCount.value() // returns the value
hitCount.isExact() // returns the accuracy</code></pre>
</div>
</div>
<div class="paragraph">
<p>Moreover, hit count accuracy can be configured both globally and for each query execution to improve the performance of the queries.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the efficiency of the #list query method has been improved.</p>
</li>
<li>
<p>High-performance indexed count aggregation queries are now supported.</p>
</li>
<li>
<p>More projections kinds have been added:</p>
<div class="ulist">
<ul>
<li>
<p>Score</p>
</li>
<li>
<p>Version</p>
</li>
<li>
<p>Star/Identity</p>
<div class="paragraph">
<p>and they are now available also using the REST query APIs.</p>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>BigDecimal and BigInteger types are now supported on the ickle queries.</p>
</li>
<li>
<p>index sharding is now configurable.</p>
</li>
<li>
<p>indexing can be now configured in manual mode.</p>
</li>
<li>
<p>index statistics now also contain the faults.</p>
</li>
<li>
<p>the index engine is now called in a non-blocking fashion.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="tracing">Tracing</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The tracing subsystem configuration was greatly improved. Tracing can be configured both globally:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;cache-container name="default"&gt;
      &lt;tracing collector-endpoint="${infinispan.tracing.collector-endpoint}" security=”true” /&gt;
&lt;/cache-container&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>and per-cache:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">tracing:
    enabled: true
    categories:
      - "container"
      - "cluster"
      - "persistence"
      - “x-site”</code></pre>
</div>
</div>
<div class="paragraph">
<p>Moreover, many more things can be traced:
* cluster calls
* cross-site calls
* persistence operations
* security audit operations</p>
</div>
<div class="paragraph">
<p>All of the aboive, with the only exception of the security tracing, can be enabled / disabled at runtime.</p>
</div>
<div class="paragraph">
<p>The following is a trace going from client application to the server via Hot Rod, involving a call to a persistent store;.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/tracing15-1.png"><img src="/assets/images/blog/thumb-tracing15-1.png" alt="Tracing #1" width="550" height="107"></a>
</div>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/tracing15-2.png"><img src="/assets/images/blog/thumb-tracing15-2.png" alt="Tracing #2" width="550" height="101"></a>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="console">Console</h2>
<div class="sectionbody">
<div class="paragraph">
<p>List  the connected clients from the console.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/console15-1.png"><img src="/assets/images/blog/thumb-console15-1.png" alt="Console #1" width="550" height="291"></a>
</div>
</div>
<div class="paragraph">
<p>Manage roles, users and access control for Principal Role Mappers from the console.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/console15-2.png"><img src="/assets/images/blog/thumb-console15-2.png" alt="Console #1" width="550" height="302"></a>
</div>
</div>
<div class="paragraph">
<p>Infinispan Server web console can be switched to dark mode.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/console15-3.png"><img src="/assets/images/blog/thumb-console15-3.png" alt="Console #3" width="550" height="286"></a>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="core">Core</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Many of the core optimizations have been around optimizing intra-cluster communications, especially around previous values that were identified being returned when they are not needed. This ensures Infinispan only sends the cache value around only in the case of put operations, reducing those payloads substantially.</p>
</div>
<div class="sect2">
<h3 id="remove-operations-behavior-change">Remove Operations behavior change</h3>
<div class="paragraph">
<p>Remove operations on a non tx cache will no longer generate intra-cluster traffic if no value is present. Cross sit removes are still always replicated due to not knowing if the other site has the key or not. Stores may load the key to see if it is present to invoke a remove or not, depending on the cache configuration.
This also may prevent some listeners from receiving remove notifications, since the operation is not replicated.</p>
</div>
</div>
<div class="sect2">
<h3 id="writes-on-backup-nodes-do-not-retrieve-previous-value">Writes on Backup Nodes do not retrieve previous value</h3>
<div class="paragraph">
<p>Internally write operations would be performed on backup nodes returning the previous value to the primary owner. There is no need for this and as such we have optimized intra cluster communication to no longer return this value.</p>
</div>
</div>
<div class="sect2">
<h3 id="converter-listener-can-ignore-old-value">Converter Listener can ignore old value</h3>
<div class="paragraph">
<p>Listener converters can override a new method includeOldValue. This allows for a converter to not send an old value along in a change event, reducing payload size of such events. This is useful for events where they only utilize the new value. Link to the source.</p>
</div>
<div class="paragraph">
<p>An example of a converter that just appends the new value and lifespan as the value for the listener.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">   @ProtoName("StringAppender")
   public static class StringAppender implements CacheEventConverter&lt;Object, String, String&gt; {
      @Override
      public String convert(Object key, String oldValue, Metadata oldMetadata, String newValue, Metadata newMetadata, EventType eventType) {
         return oldValue + (oldMetadata != null ? oldMetadata.lifespan() : "null") + newValue + (newMetadata != null ? newMetadata.lifespan() : "null");
      }

      /**
       * Whether the old value should be returned in the event with the converted value.
        */
      @Override
      public boolean includeOldValue() {
         return false;
      }
   }</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="marshalling">Marshalling</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Our ProtoStream library, which handles annotation-based generation of Protocol Buffers marshallers, has been updated to finally support the proto3 syntax, including the <code>map</code> type. ProtoStream can now generate marshallers for Java <code>records</code>, as well as introducing a new annotation <code>@Proto</code> which makes life much simpler:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Proto
@Indexed
public record Book(
    @Text String title,
    @Keyword(projectable = true, sortable = true, normalizer = "lowercase", indexNullAs = "unnamed", norms = false) String description,
    int publicationYear,
    Set&lt;Author&gt; authors,
    Type bookType,
    BigDecimal price
) { }</code></pre>
</div>
</div>
<div class="paragraph">
<p>ProtoStream’s programmatic API has also received some love: you can now generate schemas from your code, and you can easily implement hand-written marshallers in case the annotation-based magic doesn’t work for you.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Schema schema = new Schema.Builder("magazine.proto")
    .packageName("magazine_sample")
    .addMessage("Magazine")
        .addField(Type.Scalar.STRING, "name", 1)
        .addField(Type.Scalar.INT32, "publicationYear", 2)
        .addField(Type.Scalar.INT32, "publicationMonth", 3)
        .addRepeatedField(Type.Scalar.STRING, "stories", 4)
    .build();

FileDescriptorSource file = FileDescriptorSource.fromString("magazine.proto", schema.toString());</code></pre>
</div>
</div>
<div class="paragraph">
<p>By popular demand, we have also undeprecated the use of JBoss Marshalling, although we still highly recommend ProtoBuf for interoperability and performance.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="memcached-protocol">Memcached protocol</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We upgraded our memcached connector to support the binary protocol as well as supporting authentication and encryption for both the text and binary variants. Because of this, the connector is also exposed via our single-port, with protocol auto-detection! While we do not yet support the Memcached meta commands, text-based authentication can be performed by sending a fake <code>set`</code> command with any key:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-none hljs">set &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt;\r\n
username password\r\n</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="server">Server</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Server security has been expanded with the new <code>aggregate-realm</code> type, which allows you to combine different realm types for authentication and authorization. For example, you could use client certificates for authentication and an LDAP server to perform authorization:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;server xmlns="urn:infinispan:server:15.0"&gt;
   &lt;security&gt;
       &lt;security-realms&gt;
           &lt;security-realm name="default" default-realm="aggregate"&gt;
               &lt;server-identities&gt;
                   &lt;ssl&gt;
                       &lt;keystore path="server.pfx" password="secret" alias="server"/&gt;
                       &lt;truststore path="trust.pfx" password="secret"/&gt;
                   &lt;/ssl&gt;
               &lt;/server-identities&gt;
               &lt;properties-realm groups-attribute="Roles"&gt;
                   &lt;user-properties path="users.properties" relative-to="infinispan.server.config.path"/&gt;
                   &lt;group-properties path="groups.properties" relative-to="infinispan.server.config.path"/&gt;
               &lt;/properties-realm&gt;
               &lt;truststore-realm/&gt;
               &lt;aggregate-realm authentication-realm="trust" authorization-realms="properties"&gt;
                   &lt;name-rewriter&gt;
                       &lt;common-name-principal-transformer/&gt;
                   &lt;/name-rewriter&gt;
               &lt;/aggregate-realm&gt;
           &lt;/security-realm&gt;
       &lt;/security-realms&gt;
   &lt;/security&gt;
&lt;/server&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="persistence">Persistence</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Along with the sub changes below we also have optimized persistent entries that do not have expiration or other custom metadata, reducing marshalled byte size by approximately 40 bytes per entry.</p>
</div>
<div class="sect2">
<h3 id="soft-index-file-store">Soft-Index File Store</h3>
<div class="paragraph">
<p>The underlying index for the Soft Index File Store has been completely revamped to no longer utilize a different set of “segments” for its index. Instead it splits its index into a number equal to the caches configured segments (ie. cache &#8594; clustering &#8594; hash &#8594; number of segments). The “index segments” configuration is now deprecated and ignored.</p>
</div>
<div class="paragraph">
<p>This change allows for more efficient segment based operations.
Iteration within a subset of segments now only needs to read a single file instead of multiple.
Cache rebalance with DIST is now orders of magnitude faster as it just drops a single index
Key lookup is also now slightly faster (on average 4 less hash comparisons)</p>
</div>
<div class="paragraph">
<p>Index files now also utilize a portion of the open files limit to prevent possibility of file descriptor exhaustion. By default the index will use up to 10% of the file limit to keep files open, closing as needed.</p>
</div>
</div>
<div class="sect2">
<h3 id="passivation">Passivation</h3>
<div class="paragraph">
<p>Passivation has been changed to be less chatty. Originally passivation required contents to only be in memory or in the store. This has been found to generate too many write operations to the underlying store. Instead now it is permitted that a value be stale in the store when it is present in memory. This prevents many remove operations from being generated. Upon shutdown or if the entry is evicted from memory only then will the store be updated with the proper value.</p>
</div>
<div class="paragraph">
<p>With a clean shutdown there will be no data inconsistency with a restart. It should be noted that if the node crashes without proper shutdown the cache may have a stale value (new behavior) instead of no value (previous behavior) for values that were in memory.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="operator">Operator</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Configure Readiness, Liveness and Startup probe values</p>
</li>
<li>
<p>Expose JMX endpoint</p>
</li>
<li>
<p>Configuration of StatefulSet PriorityClass</p>
</li>
<li>
<p>Allow users to define credential-store entries</p>
</li>
<li>
<p>ConfigListener configure CPU and Memory resources</p>
</li>
<li>
<p>Make cross-site failure detection configurable</p>
</li>
<li>
<p>Use TLSv1.3 as default for Xsite</p>
</li>
<li>
<p>Xsite GossipRouter improvements</p>
</li>
<li>
<p>Allow setting the CPU and Memory resources</p>
</li>
<li>
<p>Added and enabled heartbeats by default</p>
</li>
<li>
<p>Disabled suspect events by default</p>
</li>
<li>
<p>TLS client authentication by default</p>
</li>
<li>
<p>Increase the probe timeout</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="helm-charts">Helm charts</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Add ability to define custom environment variables</p>
</li>
<li>
<p>Add ability to set tolerations</p>
</li>
<li>
<p>Add support for node affinity and node selectors</p>
</li>
<li>
<p>Allow the user to specify container securityContext</p>
</li>
<li>
<p>Allow TLS configuration on endpoints</p>
</li>
<li>
<p>Allow TLS configuration on JGroups transport</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="graalvm">GraalVM</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In addition to our various Quarkus integrations, Infinispan now provides the <code>infinispan-client-hotrod-graalvm</code> and <code>infinispan-core-graalvm</code> modules. These modules enable you to build native Hot Rod clients and Embedded Infinispan applications natively with GraalVM, allowing integration with other frameworks such as Spring Broot.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="security-manager">Security Manager</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We have completely removed support for the Java Security Manager, since it has been deprecated for removal in the JDK. It was designed mostly for sandboxing Java applets, but it was somehow (wrongly) co-opted as a way to implement similar functionality for normal Java applications. It was slow and cumbersome, and we’re glad to see it go. The removal of SecurityManager support from Infinispan does not affect its authentication and authorization capabilities.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="integrations">Integrations</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Our second-level cache component now supports Hibernate ORM 6.4</p>
</li>
<li>
<p>We have dropped CDI support from our JCache provider since the specification has not been updated for Jakarta EE</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="removals">Removals</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Sadly, a couple of items have been removed, as we did not see much use in the wild: scattered caches and the cloud-events integration module. May they rest in peace.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="documentation">Documentation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Many improvements, updates and fixes.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="release-notes">Release notes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can look at the <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;version=12377084">release notes</a> to see what has changed since our latest CR.</p>
</div>
<div class="paragraph">
<p>Get them from our <a href="https://infinispan.org/download/">download page</a>.</p>
</div>
</div>
</div>]]></content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="final" /><summary type="html"><![CDATA[Don&#8217;t you know I&#8217;m still standin' better than I ever did? Lookin' like a true survivor, feelin' like a little kid]]></summary></entry><entry><title type="html">Using Infinispan Server for your Redis clients</title><link href="https://infinispan.org/blog/2024/02/02/infinispan-server-redis-clients" rel="alternate" type="text/html" title="Using Infinispan Server for your Redis clients" /><published>2024-02-02T01:00:00+01:00</published><updated>2024-02-02T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/02/02/infinispan-server-redis-clients</id><content type="html" xml:base="https://infinispan.org/blog/2024/02/02/infinispan-server-redis-clients"><![CDATA[<div class="paragraph">
<p>Dear Infinispan community,</p>
</div>
<div class="paragraph">
<p>we&#8217;ve put together a video that shows how you can seamlessly connect your Redis clients to Infinispan Server, and take advantage of our advanced capabilities.</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="640" height="380" src="https://www.youtube.com/embed/Xi9gTA0jfD0?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></content><author><name>Tristan Tarrant</name></author><category term="video" /><category term="demo" /><category term="redis" /><summary type="html"><![CDATA[Dear Infinispan community,]]></summary></entry><entry><title type="html">Infinispan RESP in action: Resque use case</title><link href="https://infinispan.org/blog/2024/01/19/infinispan-resp-resque-use-case" rel="alternate" type="text/html" title="Infinispan RESP in action: Resque use case" /><published>2024-01-19T01:00:00+01:00</published><updated>2024-01-19T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/01/19/infinispan-resp-resque-use-case</id><content type="html" xml:base="https://infinispan.org/blog/2024/01/19/infinispan-resp-resque-use-case"><![CDATA[<div class="paragraph">
<p>As you may know Infinispan 15 extended its RESP compatibility implementing most of the command related to the principal data types (set, list, hashes, sorted set&#8230;&#8203;).</p>
</div>
<div class="paragraph">
<p>In this post we want to present a demo case of integration between a real application (<a href="https://github.com/resque/resque">Resque</a>) and Infinispan used as a Redis-compatible cache backend.<br>
Aim of this is to show how it&#8217;s easy to switch between Redis and Infinispan making available to your application all the advanced features of our clustered cache server.</p>
</div>
<div class="paragraph">
<p>Resque is a job scheduler that creates jobs and send them to execution queues, it uses Redis as default backend and provides a testsuite and a demo application.<br>
Try yourself how Infinispan can seamlessly replace the default backend: just clone
<a href="https://github.com/rigazilla/resque/tree/ispn-testsuite">this Resque fork</a> and follow the <a href="https://github.com/rigazilla/resque/blob/ispn-testsuite/README.ispn.md">Infinispan README</a> to run both the test suite and the demo application.</p>
</div>
<div class="paragraph">
<p>Everything worked as a charm? Nice! Now check the diff with the original project, we only added code to turn on/off Infinispan instead of Redis. Nothing more than that! (*)</p>
</div>
<div class="paragraph">
<p>Hope you ejoyed this post!</p>
</div>
<div class="paragraph">
<p>Cheers,<br>
The Infinispan Team</p>
</div>
<div class="paragraph">
<p>(*) What? You also noticed we changed the expected result for a test. Surely you can easily guess why&#8230;&#8203; if not just ask us on <a href="https://infinispan.zulipchat.com/#">Zulip</a>!</p>
</div>]]></content><author><name>Vittorio Rigamonti</name></author><category term="demo" /><category term="use case" /><category term="resp" /><category term="redis" /><summary type="html"><![CDATA[As you may know Infinispan 15 extended its RESP compatibility implementing most of the command related to the principal data types (set, list, hashes, sorted set&#8230;&#8203;).]]></summary></entry><entry><title type="html">Infinispan Insights: Securing Infinispan with Keycloak</title><link href="https://infinispan.org/blog/2024/01/09/securing-infinispan-with-keycloak" rel="alternate" type="text/html" title="Infinispan Insights: Securing Infinispan with Keycloak" /><published>2024-01-09T01:00:00+01:00</published><updated>2024-01-09T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/01/09/infinispan-security-keycloak</id><content type="html" xml:base="https://infinispan.org/blog/2024/01/09/securing-infinispan-with-keycloak"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This tutorial shows you how to secure your Infinispan cluster using Keycloak.
To understand the basics of Infinispan Security, check
<a href="https://infinispan.org/blog/2023/12/19/infinispan-secured-caches">this blog post</a> before.</p>
</div>
<div class="paragraph">
<p><strong>Key Points:</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Learn how to create a security realm in Keycloak.</p>
</li>
<li>
<p>Override the default security realm in Infinispan.</p>
</li>
<li>
<p>Authentication and authorization in Infinispan with Keycloak.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="infinispan-and-keycloak-in-a-nutshell">Infinispan and Keycloak in a nutshell</h2>
<div class="sectionbody">
<div class="sect3">
<h4 id="about-infinispan">About Infinispan</h4>
<div class="paragraph">
<p>Infinispan is an open-source, in-memory distributed key/value data store. It is designed to provide fast
and scalable access to frequently accessed data by storing it in memory. In addition to caching,
Infinispan offers features for data distribution, replication, and partitioning, making it suitable
for use in distributed and clustered environments.</p>
</div>
<div class="paragraph">
<p>Infinispan is often used in scenarios where low-latency access to data is critical, such as caching
frequently accessed database queries, session data in web applications, or other
use cases where quick access to data can improve overall system performance</p>
</div>
</div>
<div class="sect3">
<h4 id="about-keycloak">About Keycloak</h4>
<div class="paragraph">
<p><a href="https://www.keycloak.org/">Keycloak</a> is an open-source identity and access management solution developed by Red Hat.
It provides functionalities for identity and access management, including features like single sign-on (SSO),
user authentication, authorization, and user federation. Keycloak is designed to simplify the implementation
of security protocols and standards such as OAuth 2.0, OpenID Connect, and SAML.
Some key features include Single Sign-On (SSO), Identity Brokering, User Authentication,
User Federation, RBAC and more.</p>
</div>
</div>
<div class="sect3">
<h4 id="infinispan-and-keycloak">Infinispan and Keycloak</h4>
<div class="paragraph">
<p>Keycloak uses Infinispan as its underlying data store for caching and storage purposes.
Infinispan provides  scalable and efficient caching of authentication and authorization-related data.
This helps improve performance and responsiveness, especially in scenarios where quick access to user
session information and other identity-related data is crucial.</p>
</div>
<div class="paragraph">
<p>Some ways <strong>Keycloak leverages Infinispan</strong> include Caching User Sessions, storing Authorization policies,
providing distributed caching, improving performance, <a href="https://www.keycloak.org/2023/12/recover-site-failures">failover recovering</a>
and more.</p>
</div>
</div>
<div class="sect3">
<h4 id="what-about-infinispan-leveraging-keycloak">What about Infinispan leveraging Keycloak ?</h4>
<div class="paragraph">
<p>Infinispan provides several ways to handle authentication and user management.
By default, the security realm is properties based. However, token based authentication is supported
and Keycloak can be used for that purpose.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="creating-a-security-realm-in-keycloak">Creating a Security Realm in Keycloak</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="run-keycloak-in-dev-mode">Run Keycloak in dev mode</h3>
<div class="paragraph">
<p>The easiest way to use Keycloak on your laptop is in a container using the development mode.
Because we&#8217;re going to run Keycloak in one container and Infinispan in another, let&#8217;s set up
a network to connect them.</p>
</div>
<div class="paragraph">
<p>For Linux users, there&#8217;s an option called <strong>network_mode: host</strong> that might be available
to you instead of using a network bridge. However, since this option doesn&#8217;t work for
Mac or Windows currently, we&#8217;ll focus on the method that suits all operating systems.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">docker network create -d bridge mynetwork
docker run -p 8080:8080 --network=mynetwork --name=keycloak -e KEYCLOAK_ADMIN=keycloak -e KEYCLOAK_ADMIN_PASSWORD=keycloak quay.io/keycloak/keycloak:latest start-dev</code></pre>
</div>
</div>
<div class="paragraph">
<p>Keycloak Image will create an administrator user by defining the KEYCLOAK_ADMIN and KEYCLOAK_ADMIN_PASSWORD
environment variables.</p>
</div>
<div class="paragraph">
<p>After getting the container up and running, go to <a href="http://localhost:8080">http://localhost:8080</a>
Click on the Administration Console link, and log in using the credentials <strong>"keycloak/keycloak"</strong>.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminKeycloak.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminKeycloak.png" alt="Admin Keycloak" width="800" height="316"></a>
</div>
</div>
</div>
<div class="sect2">
<h3 id="create-a-realm">Create a realm</h3>
<div class="paragraph">
<p>Keycloak realms are a fundamental concept in Keycloak. Realms in Keycloak serve as a way to
isolate and manage different sets of users, applications, and their associated configurations.</p>
</div>
<div class="paragraph">
<p>Using the web administration tool, create a new realm called <strong>"Infinispan"</strong>.
This realm is what the Infinispan Server will use in the later steps of this tutorial.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/createRealmKeycloak.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/createRealmKeycloak.png" alt="Keycloak create realm" width="200" height="192"></a>
</div>
</div>
<div class="paragraph">
<p>Name your realm <strong>“infinispan”</strong>.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/infinispanRealmKeycloak.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/infinispanRealmKeycloak.png" alt="Keycloak: realm name is infinispan" width="800" height="569"></a>
</div>
</div>
</div>
<div class="sect2">
<h3 id="create-the-infinispan-clients">Create the Infinispan clients</h3>
<div class="paragraph">
<p>Clients are entities that can request authentication of a user. Clients come in two forms.
The first type of client is an application that wants to participate in single-sign-on.
These clients just want Keycloak to provide security for them. The other type of client is one that
is requesting an access token so that it can invoke other services on behalf of the authenticated user.</p>
</div>
<div class="paragraph">
<p>For the Infinispan Server and testing the Console security, we&#8217;ll require two clients set up
in Keycloak: one named <strong>"infinispan-console"</strong> and the other <strong>"infinispan-server"</strong>.</p>
</div>
<div class="sect3">
<h4 id="infinispan-console-client">Infinispan Console Client</h4>
<div class="paragraph">
<p>Create a Keycloak client named <strong>“infinispan-console”</strong>. The Infinispan Web Console uses this client
to authenticate console users with Keycloak in order to obtain an authentication token. This token is
then used to authenticate all requests by the console to the Infinispan server.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/infinispan-client-stepOne.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/infinispan-client-stepOne.png" alt="Keycloak: infinispan-console client step 1" width="800" height="377"></a>
</div>
</div>
<div class="paragraph">
<p>Configure the valid redirect URIs with Infinispan’s console URI: <strong><a href="http://localhost:11222" class="bare">http://localhost:11222</a></strong></p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/infinispan-client-stepTwo.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/infinispan-client-stepTwo.png" alt="Keycloak: infinispan-console client step 2" width="800" height="503"></a>
</div>
</div>
<div class="paragraph">
<p>This step is completed.</p>
</div>
</div>
<div class="sect3">
<h4 id="infinispan-server-client">Infinispan Server Client</h4>
<div class="paragraph">
<p>Create a second client called <strong>"infinispan-server"</strong>. Set <strong>"client authentication"</strong> to <strong>"ON"</strong>.
This defines the type of the OIDC client. When it&#8217;s ON, the OIDC type is set to confidential
access type. When it&#8217;s OFF, it is set to public access type ("infinispan-console" client type).</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/infinispan-server-client-stepTwo.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/infinispan-server-client-stepTwo.png" alt="Keycloak: infinispan-server client step 2" width="800" height="368"></a>
</div>
</div>
<div class="paragraph">
<p>This step is completed.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="create-a-user">Create a user</h3>
<div class="paragraph">
<p>Once we have the two clients created, we need to create an admin user for Infinispan.</p>
</div>
<div class="paragraph">
<p>Click on the <strong>"users"</strong> menu, and create a user named <strong>"admin"</strong>.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/createAdminUser.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/createAdminUser.png" alt="Keycloak: create admin" width="800" height="448"></a>
</div>
</div>
<div class="paragraph">
<p>Once the user admin is created, navigate to the user detail page.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminDetailKeycloak.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminDetailKeycloak.png" alt="Keycloak: admin detail" width="800" height="575"></a>
</div>
</div>
<div class="paragraph">
<p>In the credentials tab, create a password for the user, for example, <strong>"adminPassword"</strong>.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminSetAPasswordKeycloak.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminSetAPasswordKeycloak.png" alt="Keycloak: admin set password" width="500" height="273"></a>
</div>
</div>
<div class="paragraph">
<p>We are now ready to run Infinispan.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="running-infinispan-secured-with-a-keycloak-realm">Running Infinispan secured with a Keycloak realm</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="create-the-infinispan-security-realm-configuration">Create the Infinispan security realm configuration</h3>
<div class="paragraph">
<p>You can configure this in XML, JSON, or YAML. In the example provided below, the configuration
is in YAML format.</p>
</div>
<div class="paragraph">
<p>Create a file named <strong>infinispan-token-realm.yaml</strong> with the following content.</p>
</div>
<div class="paragraph">
<p><strong>infinispan-token-realm.yaml</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre>server:
 security:
   securityRealms:
     - name: default
       tokenRealm:
         name: infinispan
         authServerUrl: 'http://keycloak:8080'
         client-id: infinispan-console
         oauth2Introspection:
           clientId: infinispan-server
           clientSecret: 'COPY AND PASTE THE SECRET FROM KEYCLOAK'
           introspectionUrl: 'http://keycloak:8080/realms/infinispan/protocol/openid-connect/token/introspect'</pre>
</div>
</div>
<div class="paragraph">
<p>We are not done yet!!</p>
</div>
<div class="paragraph">
<p>Read the following sections to understand and <strong>change the placeholders</strong> in the file.</p>
</div>
<div class="sect3">
<h4 id="default-security-realm-name">Default Security Realm name</h4>
<div class="paragraph">
<p>The security realm is named <strong>"default"</strong>. This file is designed to replace the default security realm
in Infinispan, which is originally based on properties, with the configuration for this
token-based realm.</p>
</div>
</div>
<div class="sect3">
<h4 id="client-secret">Client Secret</h4>
<div class="paragraph">
<p>Retrieve the secret for the <strong>"infinispan-server"</strong> client from the Keycloak Administration,
and then paste the secret value into the file replacing <strong>'COPY AND PASTE THE SECRET FROM KEYCLOAK'</strong>.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/grabSecretFromInfinispanServerClient.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/grabSecretFromInfinispanServerClient.png" alt="Keycloak: grab secret" width="800" height="465"></a>
</div>
</div>
</div>
<div class="sect3">
<h4 id="authentication-server-url-authserverurl">Authentication Server URL - <strong>authServerUrl</strong></h4>
<div class="paragraph">
<p>The authentication server is Keycloak, and it&#8217;s running at <strong>localhost:8080</strong>. However, in the YAML
configuration above, we used <strong>"keycloak"</strong> instead of "localhost" (the container name).
This adjustment is needed when running containers in a Docker network. The Infinispan Server
will be reaching out to the Keycloak Server inside the Docker environment. As mentioned earlier,
Linux users can use "localhost" with the <strong>network_mode: host</strong> configuration.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="run-the-infinispan-server-overriding-the-default-security-realm">Run the Infinispan Server overriding the default security realm</h3>
<div class="paragraph">
<p>Lets run Infinispan in a container providing the created security realm configuration.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">docker run -it -p 11222:11222 -v $(pwd):/user-config
--network=mynetwork
--name=infinispan quay.io/infinispan/server:15.0
-c infinispan.xml
-c /user-config/infinispan-token-realm.yaml</code></pre>
</div>
</div>
<div class="paragraph">
<p>The command:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Creates a volume "user-config"</strong> in the current directory where we created the file <code>infinispan-token-realm.yaml</code></p>
</li>
<li>
<p><strong>Attaches the container to the network "mynetwork"</strong> so Infinispan and Keycloak can connect</p>
</li>
<li>
<p><strong>Uses <code>-c</code></strong>, which means the container is using the default configuration file, <code>infinispan.xml</code>.
Yet, specifying another <code>-c</code> file, it adds the content of <code>infinispan-token-realm.yaml</code> to <code>infinispan.xml</code>.
Since this file configures the default security realm, the original Infinispan default properties realm
will be replaced with the token-based realm.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="verify-the-changes">Verify the changes</h3>
<div class="paragraph">
<p>Accessing the following URL provides the information used by the Infinispan Web console
to handle authentication.</p>
</div>
<div class="paragraph">
<p><a href="http://localhost:11222/rest/v2/login?action=config" class="bare">http://localhost:11222/rest/v2/login?action=config</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
   "mode": "OIDC",
   "clientId": "infinispan-console",
   "ready": "true",
   "realm": "infinispan",
   "url": "http://keycloak:8080"
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The Infinispan Console will use the information above, and making use of the
<a href="https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter">Keycloak Javascript Adapter</a>,
the interface  will redirect to Keycloak for user authentication.</p>
</div>
</div>
<div class="sect2">
<h3 id="connect-to-the-console-with-the-admin-user">Connect to the console with the admin user</h3>
<div class="paragraph">
<p>Go the console web URL: <a href="http://localhost:11222" class="bare">http://localhost:11222</a></p>
</div>
<div class="sect3">
<h4 id="this-site-cant-be-reached">This site can’t be reached</h4>
<div class="paragraph">
<p>The console needs to access Keycloak from outside the container.
However, the realm configuration uses <code>keycloak</code> host.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/siteNotReached.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/siteNotReached.png" alt="Site not reached" width="400" height="263"></a>
</div>
</div>
<div class="paragraph">
<p>To avoid this issue, the workaround is simple: add to the following line to the <code>/etc/hosts</code> file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre> 127.0.0.1      keycloak</pre>
</div>
</div>
<div class="paragraph">
<p>As mentioned before, If you are using linux you can avoid this by using localhost and running
both containers with network_mode: host.</p>
</div>
</div>
<div class="sect3">
<h4 id="authenticate-using-keycloak">Authenticate using Keycloak</h4>
<div class="paragraph">
<p>When opening the Infinispan Console, Infinispan will attempt to make a call to a REST API
that requires authentication. You&#8217;ll be redirected to the Keycloak authentication, where you
should use the credentials <strong>admin/adminPassword</strong>. When you initially connect as admin,
you&#8217;ll be prompted to change the password. For this example, you can stick with "adminPassword".</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/authenticateUsingKeycloak.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/authenticateUsingKeycloak.png" alt="Infinispan: authenticate with Keycloak" width="400" height="258"></a>
</div>
</div>
<div class="paragraph">
<p>After Keycloak redirects back to the Infinispan Console, you can verify that admin is authenticated.
However, you will encounter Unauthorized errors in the console interface, since the connected
user’s roles are not known by Infinispan.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminIsNotAnAdmin.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminIsNotAnAdmin.png" alt="Admin has not admin role" width="800" height="264"></a>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="create-and-assign-infinispan-admin-role">Create and assign Infinispan ADMIN role</h3>
<div class="paragraph">
<p>To grant complete access to the admin user, it&#8217;s necessary to create a role named <strong>"admin"</strong>
and assign that role to the user in Keycloak.</p>
</div>
<div class="sect3">
<h4 id="create-the-admin-role-in-keycloak">Create the ADMIN role in Keycloak</h4>
<div class="paragraph">
<p>Open the Keycloak administration interface, click on "Roles", and then create a role with the name
"admin".</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/createRoleAdminKeycloak.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/createRoleAdminKeycloak.png" alt="Keycloak: create admin role" width="800" height="285"></a>
</div>
</div>
</div>
<div class="sect3">
<h4 id="assign-the-admin-role-in-keycloak">Assign the ADMIN role in Keycloak</h4>
<div class="paragraph">
<p>In the admin user detail page, go to the Role Mapping tab and assign the previously created
"admin" role there.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/asignAdminRoleToAdminUser.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/asignAdminRoleToAdminUser.png" alt="Keycloak: assign admin role to admin user" width="800" height="361"></a>
</div>
</div>
<div class="paragraph">
<p>Return to the Infinispan Console, and you&#8217;ll notice that the admin user is now granted the
admin role in Infinispan as well.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminIsGranted.png"><img src="/assets/images/blog/2024-01-09-infinispan-secured-keycloak/adminIsGranted.png" alt="Infinispan: admin is granted" width="800" height="440"></a>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="to-go-further">To go further</h3>
<div class="paragraph">
<p>In the <a href="https://infinispan.org/tutorials/simple/simple_tutorials.html#secured_with_token_keycloak_remote-cache-tutorials">Infinispan Simple tutorials</a>
repository you will find an example with docker-compose, for Linux and non linux users.
There are many other advanced features in Keycloak, this is just the most simple use case.</p>
</div>
<div class="paragraph">
<p>Learn more about it in the Keycloak and Infinispan documentation.</p>
</div>
</div>
</div>
</div>]]></content><author><name>Katia Aresti</name></author><category term="tutorial" /><category term="security" /><category term="rbac" /><category term="authentication" /><category term="keycloak" /><summary type="html"><![CDATA[This tutorial shows you how to secure your Infinispan cluster using Keycloak. To understand the basics of Infinispan Security, check this blog post before.]]></summary></entry><entry><title type="html">Infinispan Insights: Security basics and secured caches</title><link href="https://infinispan.org/blog/2023/12/20/infinispan-secured-caches" rel="alternate" type="text/html" title="Infinispan Insights: Security basics and secured caches" /><published>2023-12-20T01:00:00+01:00</published><updated>2023-12-20T01:00:00+01:00</updated><id>https://infinispan.org/blog/2023/12/20/infinispan-secured-caches</id><content type="html" xml:base="https://infinispan.org/blog/2023/12/20/infinispan-secured-caches"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This article shows you how to secure your Infinispan cluster, protecting both cluster management and data
access in various Infinispan caches</p>
</div>
<div class="paragraph">
<p><strong>Key Points:</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Learn how default authentication works in Infinispan</p>
</li>
<li>
<p>Explore how authorization works in Infinispan.</p>
</li>
<li>
<p>Understand the basics of creating secure caches in a straightforward way with Infinispan.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="security-in-a-nutshell">Security in a nutshell</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When we talk about security, there are two main things to consider: proving who you are (authentication) and deciding
what you&#8217;re allowed to do (authorization). These tasks are managed by one or more security realms.</p>
</div>
<div class="sect3">
<h4 id="authentication">Authentication</h4>
<div class="paragraph">
<p>Authentication is the process of verifying the identity of an entity, such as a user, system, or device, to ensure
that it is who or what it claims to be. It can be done through different methods such as password based authentication,
token based authentication, certificate based… and more.</p>
</div>
</div>
<div class="sect3">
<h4 id="authorization">Authorization</h4>
<div class="paragraph">
<p>Authorization is the process of granting or denying access permissions to authenticated users or entities.
It defines what actions or resources users are allowed to access based on their verified identity.
Authorization works alongside authentication to ensure that only authorized users can perform specific actions within a
system. Infinispan uses Role-Based Access Control (RBAC) for authorization.</p>
</div>
</div>
<div class="sect3">
<h4 id="security-realms">Security Realms</h4>
<div class="paragraph">
<p>A security realm is a set of policies and authentication methods governing access to a system or resource.
It establishes rules for user authentication and authorization, such as using usernames/passwords or advanced methods
like OAuth. Security realms integrate Infinispan Server deployments with the network protocols and infrastructure
in your environment that control access and verify user identities.
Infinispan integrates with Kerberos, LDAP, Trust stores… and token based authentication such as <a href="https://openid.net/">OpenID Connect</a>
providers such as <a href="https://www.keycloak.org/">Keycloak</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="infinispan-server-security">Infinispan Server Security</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To truly grasp the basics, the best method is hands-on experience.
Infinispan 15.0 simplifies understanding authentication and authorization through a visual interface.</p>
</div>
<div class="sect3">
<h4 id="running-the-infinispan-server-with-a-single-user">Running the Infinispan Server with a single user</h4>
<div class="paragraph">
<p>Start by running the Infinispan Server with a Docker or Podman container.
Make sure you have the latest version of the Infinispan Server 15.0 image by pulling it locally.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash"># Podman
podman run -it -p 11222:11222 -e USER="admin" -e PASS="password" --net=host quay.io/infinispan/server:15.0

# Docker
docker run -it -p 11222:11222 -e USER="admin" -e PASS="password" quay.io/infinispan/server:15.0</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="infinispan-defaults">Infinispan defaults</h4>
<div class="paragraph">
<p>In Infinispan, the default security realm relies on properties.
Users are established in a local properties file on the active server.
By running the container and providing "USER" and "PASS" environment variables, the
server generates a user capable of authenticating to Infinispan and is automatically granted
the "admin" implicit role.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2023-12-19-secured-caches/browser-DIGEST.png"><img src="/assets/images/blog/2023-12-19-secured-caches/browser-DIGEST.png" alt="Browser authentication" width="800" height="547"></a>
</div>
</div>
<div class="paragraph">
<p>Infinispan doesn&#8217;t maintain user authentication through a session management system in the server for
its REST API. The REST API operates in a stateless manner, and authentication, as well as role-based
access control (RBAC), is facilitated through the AUTHENTICATION header when interacting
with the REST API. The console is built using the REST API. DIGEST mechanism is part
of the supported mechanism, so the browser will ask for user/password using the native browser
authentication mechanism. For security reasons, BASIC authentication is not enabled by default
unless TLS is also configured.</p>
</div>
</div>
<div class="sect3">
<h4 id="implicit-rbac">Implicit RBAC</h4>
<div class="paragraph">
<p>Infinispan safeguards operations by specifying various permissions to operations such as creating caches,
resetting statistics, uploading data schemas, and more. A role is a set of 1 or more permissions.
Implicit authorization is enabled by default, providing predefined roles to which users can be assigned,
granting them the ability to execute specific actions.</p>
</div>
<div class="paragraph">
<p>Starting from Infinispan 15, a new feature in the console allows users to view these roles, their
corresponding permissions, and descriptions. It is now also possible to create custom roles with
specific permissions directly from the web console (previously, this capability was limited to the
Command Line Tool). However, for the purpose of this article, we will focus on utilizing the pre-existing
implicit roles.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2023-12-19-secured-caches/implicit-ROLES.png"><img src="/assets/images/blog/2023-12-19-secured-caches/implicit-ROLES.png" alt="Implicit roles" width="800" height="394"></a>
</div>
</div>
</div>
<div class="sect3">
<h4 id="running-the-server-with-multiple-users">Running the server with multiple users</h4>
<div class="paragraph">
<p>To start Infinispan locally with multiple users and distinct roles, we can employ a
identities batch that is passed to the container during startup.</p>
</div>
<div class="paragraph">
<p>1) Create a file called <strong>identities.batch</strong> with the following content.
To simplify matters, we have established a straightforward one-to-one mapping between user
names and roles.</p>
</div>
<div class="paragraph">
<p><strong>identities.batch</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre>user create "admin" -p "password" -g admin
user create "observer" -p "password" -g observer
user create "monitor" -p "password" -g monitor
user create "deployer" -p "password" -g deployer
user create "application" -p "password" -g application</pre>
</div>
</div>
<div class="paragraph">
<p>2) Provide the file on run, by creating the user-config volume and passing the IDENTITIES_BATCH env variable.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash"># Podman
podman run -it -p 11222:11222 -v $(pwd):/user-config -e IDENTITIES_BATCH="/user-config/identities.batch" --net=host quay.io/infinispan/server:15.0

# Docker
docker run -it -p 11222:11222 -v $(pwd):/user-config -e IDENTITIES_BATCH="/user-config/identities.batch" quay.io/infinispan/server:15.0</code></pre>
</div>
</div>
<div class="paragraph">
<p>Those users are now available and listed in the Infinispan Web Console.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2023-12-19-secured-caches/users-BATCH.png"><img src="/assets/images/blog/2023-12-19-secured-caches/users-BATCH.png" alt="Implicit roles" width="724" height="453"></a>
</div>
</div>
<div class="paragraph">
<p>When connecting with the "observer" user, which possesses the "observer" role,
it becomes apparent that this user is unable to access certain actions in the console that
necessitate "admin" role’s permissions. Examples include creating a cache, viewing connected clients,
or accessing the access management functionalities.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2023-12-19-secured-caches/connect-OBSERVER.png"><img src="/assets/images/blog/2023-12-19-secured-caches/connect-OBSERVER.png" alt="connect observer" width="800" height="271"></a>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="secured-caches-in-infinispan">Secured Caches in Infinispan</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Infinispan, it&#8217;s possible to create caches with data manipulation permissions restricted
to specific roles.</p>
</div>
<div class="sect3">
<h4 id="creating-a-secured-cache">Creating a secured cache</h4>
<div class="paragraph">
<p>For testing purposes, connect using the credentials admin/password and click on the
“Create a cache” button in the Data Container page. In the cache creation wizard, after opting
for all the default settings, select the "Authorization" capability, and the "admin" and "monitor"
roles.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2023-12-19-secured-caches/create-CACHE.png"><img src="/assets/images/blog/2023-12-19-secured-caches/create-CACHE.png" alt="Create Secured Cache" width="800" height="408"></a>
</div>
</div>
<div class="paragraph">
<p>The final cache configuration will look like this:</p>
</div>
<div class="paragraph">
<p><strong>config.yaml</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre>distributedCache:
  owners: "2"
  mode: "SYNC"
  statistics: "true"
  encoding:
    mediaType: "application/x-protostream"
  security:
    authorization:
      enabled: "true"
      roles:
        - "admin"
        - "monitor"</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="accessing-the-secured-cache">Accessing the Secured  Cache</h4>
<div class="paragraph">
<p>When using the "admin" user, the cache will have unrestricted access because the admin role has all the permissions. On the other hand, connecting with the "monitor" user, which is assigned the monitor role, the cache is visible. However, as the monitor role is designed solely for monitoring and not data creation, only data associated with the cache metrics will be accessible.</p>
</div>
<div class="paragraph">
<p>For users lacking the admin or monitor role, accessing the cache from the console is not possible.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2023-12-19-secured-caches/secured-cache-MONITOR.png"><img src="/assets/images/blog/2023-12-19-secured-caches/secured-cache-MONITOR.png" alt="Console: monitor connects" width="800" height="310"></a>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="going-further">Going further</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this article, you&#8217;ve explored the interplay of permissions, roles, Infinispan Security,
and the fundamentals of secured caches. Beyond these, Infinispan Security management offers a
range of additional capabilities. These include features like
<a href="https://infinispan.org/docs/stable/titles/security/security.html#configuring-encryption">data encryption</a>
and advanced security, such as providing access to an entire group of users managed by systems like LDAP.
This is achieved through a Principal Role Mapper, which establishes a connection between all these
users and a specific role.
Infinispan supports many authentication mechanisms, such as token based authentication,
which can be handled with Keycloak. Run the
<a href="https://infinispan.org/tutorials/simple/simple_tutorials.html#secured_with_token_keycloak_remote-cache-tutorials">simple tutorial</a>
to test it.</p>
</div>
</div>
</div>]]></content><author><name>Katia Aresti</name></author><category term="tutorial" /><category term="security" /><category term="rbac" /><category term="authentication" /><summary type="html"><![CDATA[This article shows you how to secure your Infinispan cluster, protecting both cluster management and data access in various Infinispan caches]]></summary></entry><entry><title type="html">Infinispan 15.0.0.Dev06</title><link href="https://infinispan.org/blog/2023/12/14/infinispan-15dev06" rel="alternate" type="text/html" title="Infinispan 15.0.0.Dev06" /><published>2023-12-14T01:00:00+01:00</published><updated>2023-12-14T01:00:00+01:00</updated><id>https://infinispan.org/blog/2023/12/14/infinispan-15.0.0.Dev06</id><content type="html" xml:base="https://infinispan.org/blog/2023/12/14/infinispan-15dev06"><![CDATA[<div class="sect1">
<h2 id="redis-endpoint">Redis endpoint</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Redis endpoint now implements most of the core Redis commands and data structures (strings, sets, lists, hashes and sorted sets), as well as implementing
clustering and CRC16 slots.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="knn-vector-search">kNN Vector search</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Infinispan can now perform indexed kNN vector searches. See our recent <a href="https://infinispan.org/blog/2023/12/13/infinispan-vector-search">blog post</a> for more information.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="infinispan-web-console">Infinispan Web Console</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The console has gained an access management section that lets you create, update, and delete roles, as well as assign access to principal mappers.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="graalvm-feature">GraalVM feature</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A GraalVM native-image <a href="https://www.graalvm.org/sdk/javadoc/org/graalvm/nativeimage/hosted/Feature.html">Feature</a> is now available via the dedicated
modules <code>infinispan-hotrod-graalvm</code> and <code>infinispan-embedded-graalvm</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="hibernate-orm-6-3-2lc">Hibernate ORM 6.3 2LC</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Our second-level cache provider now supports Hibernate ORM 6.3.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jcache-is-back">JCache is back!</h2>
<div class="sectionbody">
<div class="paragraph">
<p>While working on the Jakarta migration, we temporarily removed the JCache provider because of its optional dependency on CDI conflicting with the migration to Jakarta EE.
As of 15.0.0.Dev06, the JCache component is back, albeit without the CDI integration.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="when-is-the-final-release-coming">When is the Final release coming?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We hope to have the final release of Infinispan 15 ready for consumption by the end of the year and we will be making regular development releases.</p>
</div>
<div class="paragraph">
<p>Get them from our <a href="https://infinispan.org/download/">download page</a>.]</p>
</div>
</div>
</div>]]></content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="development" /><summary type="html"><![CDATA[Redis endpoint]]></summary></entry></feed>