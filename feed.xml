<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://infinispan.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://infinispan.org/" rel="alternate" type="text/html" /><updated>2022-09-30T09:19:09+02:00</updated><id>https://infinispan.org/feed.xml</id><title type="html">Infinispan</title><subtitle>Infinispan is a distributed in-memory key/value data store with optional schema, available under the Apache License 2.0.</subtitle><entry><title type="html">Infinispan 14.0.0.Final</title><link href="https://infinispan.org/blog/2022/09/29/infinispan-14" rel="alternate" type="text/html" title="Infinispan 14.0.0.Final" /><published>2022-09-29T14:00:00+02:00</published><updated>2022-09-29T14:00:00+02:00</updated><id>https://infinispan.org/blog/2022/09/29/infinispan-14.0.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2022/09/29/infinispan-14">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Flying saucers are probably the most common type of UFO. They are sleek and shiny and, most importantly, they come in peace bringing lots of goodies from outer space!
Just like Infinispan 14!
Oh, and the fact that it’s also the &lt;a href=&quot;https://untappd.com/b/kinnegar-brewing-flying-saucer-foreign-export-stout/1415125&quot;&gt;name of a beer&lt;/a&gt; is no sheer coincidence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/flying-saucer.jpg&quot; alt=&quot;Flying Saucer&quot; width=&quot;1230&quot; height=&quot;1220&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-requirements&quot;&gt;JDK requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will need at least JDK 11 in order to use Infinispan 14. Infinispan also supports JDK 17 LTS and the recently released JDK 19.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jakarta-ee&quot;&gt;Jakarta EE&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now ship &lt;a href=&quot;https://jakarta.ee&quot;&gt;Jakarta EE&lt;/a&gt; variants of most of our modules: just append &lt;code&gt;-jakarta&lt;/code&gt; to the artifact name:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.infinispan&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;infinispan-core-jakarta&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;14.0.0.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;core&quot;&gt;Core&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cluster Listener using &lt;code&gt;includeCurrentState`&lt;/code&gt; will have better memory and performance performance. Every key no longer requires calculating its segment while iterating and memory is freed much earlier and is closed as each segment completes transfer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State Transfer reduces how long memory is required to be held therefore reducing required memory overheads when configuring your server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State transfer metrics are exposed through JMX. Expose the number of segments during transfer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Size method when invoked on a cache has been optimized in various cases to be an &lt;code&gt;O(1)&lt;/code&gt; operation instead of &lt;code&gt;O(N)&lt;/code&gt;. Involves if expiration and if stores are configured, please check &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-9366&quot;&gt;ISPN-9366&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced some cases of blocking threads being over utilized, therefore reducing how large the blocking thread pool would need to grow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic RBAC: a dynamic, clustered role mapper that can be modified at runtime to grant/deny access to specific principals.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;query&quot;&gt;Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Native Infinispan indexing annotations which finally replace the legacy Hibernate Query annotations we&amp;#8217;ve used in past versions (see &lt;a href=&quot;https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news&quot; class=&quot;bare&quot;&gt;https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Index startup mode to determine what happens to indexes on cache start (see &lt;a href=&quot;https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news&quot; class=&quot;bare&quot;&gt;https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic index schema updates allow you to evolve your schema at runtime with near-zero impact to your queries (see &lt;a href=&quot;https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news&quot; class=&quot;bare&quot;&gt;https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support Protobuf&amp;#8217;s &lt;code&gt;oneof&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We improved the hybrid query system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support normalizers with the HotRod client&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;persistence&quot;&gt;Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SoftIndexFileStore&lt;/code&gt; (default file store) segmentation performance has been improved significantly. This also reduces the number of Index segments required which reduces the number of open files and threads required on the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JDBCStringBasedStore&lt;/code&gt; no longer requires configuring the database min and max version as this is dynamically configured when checking the JDBC connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JPAStore&lt;/code&gt; has been removed. It had been deprecated for quite a while, but the move to support Hibernate 6 prompted its removal as &lt;code&gt;JPAStore&lt;/code&gt; only worked with Hibernate 5.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hot-rod-client&quot;&gt;Hot Rod client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new Hot Rod client with a completely redesigned API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sync (blocking), Async (non-blocking) and &lt;a href=&quot;https://smallrye.io/smallrye-mutiny/&quot;&gt;Mutiny&lt;/a&gt; sub-APIs that fit with your programming model of choice.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;try (SyncContainer infinispan = Infinispan.create(&quot;hotrod://localhost&quot;)) {
    // Sync
    SyncCache&amp;lt;String, String&amp;gt; mycache = infinispan.sync().caches().get(&quot;mycache&quot;);
    mycache.set(&quot;key&quot;, &quot;value&quot;);
    String value = mycache.get(&quot;key&quot;);
    // set with options
    mycache.set(&quot;key&quot;, &quot;anothervalue&quot;, writeOptions().lifespan(Duration.ofHours(1)).timeout(Duration.ofMillis(500)).build());

    // Async
    infinispan.async().caches()
    .get(&quot;mycache&quot;).thenApply(c -&amp;gt;
        c.set(&quot;key&quot;, &quot;value&quot;).thenApply(ignore -&amp;gt;
            c.get(&quot;key&quot;).thenApply(value -&amp;gt;
                c.set(&quot;key&quot;, &quot;anothervalue&quot;,
                writeOptions().lifespan(Duration.ofHours(1)).timeout(Duration.ofMillis(500)).build()))
            ));

    // Mutiny
    infinispan.mutiny().caches()
    .get(&quot;mycache&quot;).map(c -&amp;gt;
        c.query(&quot;age &amp;gt; :age&quot;).param(&quot;age&quot;, 80).skip(5).limit(10).find())
            .subscribe().with(System.out::println);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RESP endpoint: a Redis-compatible endpoint connector (implementing the RESP 3 protocol) with support for a subset of commands: &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;del&lt;/code&gt;, &lt;code&gt;mget&lt;/code&gt;, &lt;code&gt;mset&lt;/code&gt;, &lt;code&gt;incr&lt;/code&gt;, &lt;code&gt;decr&lt;/code&gt;, &lt;code&gt;publish&lt;/code&gt;, &lt;code&gt;subscribe&lt;/code&gt;, &lt;code&gt;auth&lt;/code&gt;, &lt;code&gt;ping&lt;/code&gt;. The connector integrates with our security and protocol auto-detections, so that it is easily usable from our single-port endpoint. The implemented commands should be enough for typical caching usage. If you would like to see more, reach out via our community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you need to use &lt;a href=&quot;https://www.nist.gov/standardsgov/compliance-faqs-federal-information-processing-standards-fips&quot;&gt;FIPS&lt;/a&gt;, it&amp;#8217;s now possible to use &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/security/pkcs11-reference-guide1.html&quot;&gt;PKCS#11 keystores&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Masked and external credentials, to avoid the use of secrets in your configuration files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom security providers, such as BouncyCastle, can now be used. Just drop your provider implementation in the &lt;code&gt;server/lib&lt;/code&gt; and configure:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;ssl&amp;gt;
    &amp;lt;keystore path=&quot;server.bcfks&quot; password=&quot;secret&quot; alias=&quot;server&quot; provider=&quot;BC&quot; type=&quot;BCFKS&quot;/&amp;gt;
&amp;lt;/ssl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved TLS engine configuration, allowing fine-grained ciphersuites selection for both TLSv1.3 and TLSv1.2:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;engine enabled-protocols=&quot;TLSv1.3 TLSv1.2&quot; enabled-ciphersuites=&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&quot; enabled-ciphersuites-tls13=&quot;TLS_AES_256_GCM_SHA384&quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Endpoint worker threads configuration has been removed. With the rewrite in Infinispan 13 to utilize non blocking threads, this configuration was unused and deprecated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/management/monitoring-and-management-using-jmx-technology.html&quot;&gt;JMX&lt;/a&gt; integration with our security realms for authentication and authorization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Experimental &lt;a href=&quot;https://kernel.dk/io_uring.pdf&quot;&gt;IO_Uring&lt;/a&gt; support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST endpoints expose distribution information for caches and clusters. For more information, see &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12192&quot;&gt;ISPN-12192&lt;/a&gt; and &lt;a href=&quot;https://issues.redhat.com/browse/ISPN-12193&quot;&gt;ISPN-12193&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;console&quot;&gt;Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cache creation wizard. See our recent &lt;a href=&quot;https://infinispan.org/blog/2022/09/12/infinispan-14-console-wizard&quot;&gt;blog post&lt;/a&gt; about it&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cli&quot;&gt;CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;List cache entries, including metadata, using different formats (table, JSON, CSV)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration converter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schema command to upload, delete, modify protobuf schema&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Index command to manage indexes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client certificate authentication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;image&quot;&gt;Image&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Now based upon &lt;a href=&quot;https://catalog.redhat.com/software/containers/ubi8/openjdk-17/618bdbf34ae3739687568813&quot;&gt;ubi8/openjdk-17-runtime&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Images provided for both amd64 and arm64 architectures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SERVER_LIBS&lt;/code&gt; environment variable added to allow dependencies to be downloaded prior to server startup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;config-generator&lt;/code&gt; has been removed. Its functionality can be replaced by using configuration overlays&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;operator&quot;&gt;Operator&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Multi-Operand support, which means a single operator can managed different versions of Infinispan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FIPS support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom user configuration refactored to allow greater control of Infinispan configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Image based upon &lt;a href=&quot;https://catalog.redhat.com/software/containers/ubi9/ubi-micro/615bdf943f6014fa45ae1b58&quot;&gt;ubi9/ubi-micro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bundle provided for both amd64 and arm64 architectures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Admin service is now headless&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hibernate-orm-second-level-cache&quot;&gt;Hibernate ORM second-level cache&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate caching implementation supporting Hibernate 6. Note that Hibernate 5 caching support is no longer provided due to Jakarta EE migration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;observability&quot;&gt;Observability&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Integration with OpenTelemetry tracing (see &lt;a href=&quot;https://infinispan.org/blog/2022/07/18/infinispan-14-opentelemetry-tracing&quot; class=&quot;bare&quot;&gt;https://infinispan.org/blog/2022/07/18/infinispan-14-opentelemetry-tracing&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client / server request tracing correlations on both Hot Rod and REST APIs (see &lt;a href=&quot;https://infinispan.org/blog/2022/07/18/infinispan-14-opentelemetry-tracing&quot; class=&quot;bare&quot;&gt;https://infinispan.org/blog/2022/07/18/infinispan-14-opentelemetry-tracing&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration with Micrometer to produce Prometheus and OpenMetrics metrics&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Quarkus server now supports the same command line arguments as the normal JVM Infinispan server. In addition the Infinispan Quarkus native binary can be used in an existing unzipped Infinispan Server zip file for ease of use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many improvements, updates and fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12352858&quot;&gt;release notes&lt;/a&gt; to see what has changed since our latest CR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get them from our &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="development" /><summary type="html">Flying saucers are probably the most common type of UFO. They are sleek and shiny and, most importantly, they come in peace bringing lots of goodies from outer space! Just like Infinispan 14! Oh, and the fact that it’s also the name of a beer is no sheer coincidence.</summary></entry><entry><title type="html">Infinispan Node.js client supports query</title><link href="https://infinispan.org/blog/2022/09/25/infinispan-js-client" rel="alternate" type="text/html" title="Infinispan Node.js client supports query" /><published>2022-09-25T14:00:00+02:00</published><updated>2022-09-25T14:00:00+02:00</updated><id>https://infinispan.org/blog/2022/09/25/nodejs-010-query</id><content type="html" xml:base="https://infinispan.org/blog/2022/09/25/infinispan-js-client">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;node-js-client-0-9-0&quot;&gt;Node.js Client 0.9.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan Node.js client version 0.10.0 was released last week with added support of query with &lt;code&gt;application/x-protostream&lt;/code&gt; data format.
Up until now, our Node.js client only supported &lt;code&gt;text/plain&lt;/code&gt; and &lt;code&gt;application/json&lt;/code&gt; data formats.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;applicationx-protostream-data-format&quot;&gt;&lt;code&gt;application/x-protostream&lt;/code&gt; data format&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now use the &lt;code&gt;application/x-protostream&lt;/code&gt; data format for all the Hot Rod operations supported in js-client. To make the Node.js client backwards compatible, the client still treats key/value pairs as String by default.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;query&quot;&gt;query&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hot Rod js-client now also supports query method to perform queries on caches. For more information about querying infinispan caches, refer to &lt;a href=&quot;https://infinispan.org/docs/stable/titles/query/query.html&quot;&gt;the query documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You must set the data-format as &lt;code&gt;application/x-protostream&lt;/code&gt; to perform queries on your cache.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the working code example of the query feature, please refer to &lt;a href=&quot;https://infinispan.org/docs/hotrod-clients/js/latest/js_client.html#_working_with_queries&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;to-go-further&quot;&gt;To go further&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full client documentation is now available in the
&lt;a href=&quot;https://infinispan.org/docs/hotrod-clients/js/latest/js_client.html&quot;&gt;Hot Rod JS Client Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jira tracker for this client is available &lt;a href=&quot;https://issues.redhat.com/projects/HRJS&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Neeraj Gartia</name></author><category term="hotrod" /><category term="Node.js" /><category term="client" /><category term="javascript" /><category term="release" /><category term="Protobuf" /><category term="query" /><summary type="html">Node.js Client 0.9.0</summary></entry><entry><title type="html">Creating cache with wizard - Infinispan 14</title><link href="https://infinispan.org/blog/2022/09/13/infinispan-14-console-wizard" rel="alternate" type="text/html" title="Creating cache with wizard - Infinispan 14" /><published>2022-09-13T02:00:00+02:00</published><updated>2022-09-13T02:00:00+02:00</updated><id>https://infinispan.org/blog/2022/09/13/infinispan-14-console-wizard</id><content type="html" xml:base="https://infinispan.org/blog/2022/09/13/infinispan-14-console-wizard">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan Community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An effective and concise way to create a cache with Infinispan Console is here.
Creating a cache will now be effortless and user-centric with a wizard based intuitive approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the series of prompts, now user can create a cache just by selecting configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;choose-your-method&quot;&gt;Choose your method&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enter a unique name for the cache and choose your desired way to create it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Two options to create a cache are:&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Manually Adding JSON/YAML/XML configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wizard based selection of configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard1.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard1.png&quot; alt=&quot;Getting started&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the user already has a JSON/YAML/XML file then it is preferable to go with the first option and directly edit the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard2.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard2.png&quot; alt=&quot;Add configuration&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But in case you are looking to create a cache from scratch then Wizard based cache creation is the best way to go ahead. This blog talks in detail about the Wizard based method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;build-configuration&quot;&gt;Build configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;basic-options&quot;&gt;Basic options&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Selecting “Build cache configuration” will land on the below page containing a series of prompts or options to create your cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard3.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard3.png&quot; alt=&quot;Basic options&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every option has a default value selected beforehand with tooltips providing brief information about each option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard11.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard11.png&quot; alt=&quot;Tooltip&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;infinispan-capabilities&quot;&gt;Infinispan capabilities&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this step, we select features and configure basic options for the cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following features can be selected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Bounded&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indexed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authorization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Persistence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transactional&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backups&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard4.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard4.png&quot; alt=&quot;Features&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Selecting a feature will provide basic options for that feature. Some fields are marked mandatory in order to move to the next step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the required details are not filled in, a warning will be displayed at the top.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard5.1.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard5.1.png&quot; alt=&quot;Feature Bounded warning&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After providing the required details, you can move to the next step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard5.2.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard5.2.png&quot; alt=&quot;Feature Bounded&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More than one feature can be selected and each feature&amp;#8217;s availability is checked. If the feature is disabled, a warning is displayed and the user can not go ahead. In such a scenario, the user can either remove that feature completely or make changes to the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard6.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard6.png&quot; alt=&quot;Invalid Feature&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;cache-tuning&quot;&gt;Cache tuning&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last step in configuring the cache allows the user to tweak advanced options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard7.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard7.png&quot; alt=&quot;Cache tuning&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On selecting a certain feature, its advanced configurations can be added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard8.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard8.png&quot; alt=&quot;Feature advance option&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;review-configuration&quot;&gt;Review configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configurations selected earlier are reviewed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard9.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard9.png&quot; alt=&quot;Review Config&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JSON configuration is presented inside a code editor, which can be modified by the user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cache will be created on clicking the &quot;Create&quot; button and user will land on the Data distribution page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user can also download this configuration in JSON, YAML, or XML format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/cache-wizard/wizard10.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/cache-wizard/wizard10.png&quot; alt=&quot;Download cache config&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Dipanshu Gupta</name></author><category term="console" /><summary type="html">Dear Infinispan Community,</summary></entry><entry><title type="html">Infinispan 14.0.0.CR1</title><link href="https://infinispan.org/blog/2022/08/09/infinispan-14" rel="alternate" type="text/html" title="Infinispan 14.0.0.CR1" /><published>2022-08-09T14:00:00+02:00</published><updated>2022-08-09T14:00:00+02:00</updated><id>https://infinispan.org/blog/2022/08/09/infinispan-14.0.0.CR1</id><content type="html" xml:base="https://infinispan.org/blog/2022/08/09/infinispan-14">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 14 candidate release 1 is here! Here is your chance to verify your application against our latest and greatest and tell us if things are working as expected or if there are any showstoppers we should address before tagging the final release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aarch64-images&quot;&gt;AArch64 images&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now building images for AArch64 (aka ARM64) by default, which allow you to run Infinispan on Apple Silicon, Amazon Graviton and other ARM CPU platforms without resorting to emulation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;protobuf-oneof-support&quot;&gt;Protobuf oneof support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Protostream has been updated to support ProtoBuf 3&amp;#8217;s &lt;code&gt;oneof&lt;/code&gt; keyword.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;console&quot;&gt;Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating a new cache, it&amp;#8217;s now possible to choose the key/value types from the list of available protobuf schemas.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cli&quot;&gt;CLI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI can now connect to a server secured with client certificate authentication. The &lt;code&gt;config&lt;/code&gt; command now supports the &lt;code&gt;keystore&lt;/code&gt; and &lt;code&gt;keystore-password&lt;/code&gt; to persist the client certificate configuration. Additionally, the new &lt;code&gt;config reset&lt;/code&gt; command offers a quick way to reset all configuration properties to their default values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12391864&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get them from our &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="development" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 14 OpenTelemetry tracing integration</title><link href="https://infinispan.org/blog/2022/07/18/infinispan-14-opentelemetry-tracing" rel="alternate" type="text/html" title="Infinispan 14 OpenTelemetry tracing integration" /><published>2022-07-18T21:37:00+02:00</published><updated>2022-07-18T21:37:00+02:00</updated><id>https://infinispan.org/blog/2022/07/18/infinispan-14-opentelemetry-tracing</id><content type="html" xml:base="https://infinispan.org/blog/2022/07/18/infinispan-14-opentelemetry-tracing">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Infinispan 14 development release 04, we started to support tracing with OpenTelemetry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If configured, Infinispan Server produces cache events tracing spans and sends them to a remote tracing collector server, such as Jaeger or Zipkin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, if a Java client application with the HotRot or the Rest client produces some tracing spans,
these spans can be correlated as parent spans of the corresponding spans events produced by the Infinispan Server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;set-up-tracing-on-infinispan-server&quot;&gt;Set up tracing on Infinispan Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new version of Infinispan Server comes with a gRPC OpenTelemetry Protocol (OTLP) Exporter,
which is now supported by the majority of tracing servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, with the newer Jaeger server versions, you can enable data collection through the OTLP protocol with the following option:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;./jaeger-all-in-one --collector.otlp.enabled&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server opens a port to import gRPC OTLP tracing data at port 4317.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configure tracing on the Infinispan Server by setting system properties or environment variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;infinispan.tracing.enabled=true
otel.service.name=infinispan-server-service
otel.exporter.otlp.endpoint=http://localhost:4317
otel.metrics.exporter=none&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first property is Infinispan specific and enables the tracing capability of the Infinispan Server.
The further properties belong to the &lt;a href=&quot;https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md&quot;&gt;OpenTelemetry SDK Autoconfigure project&lt;/a&gt;
that Infinispan uses to configure the tracing exporter.
In this case, OTLP gRPC Exporter protocol is used and the server runs on the same machine as the Infinispan Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting the server with these parameters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;export JAVA_OPTS=&quot;-Dinfinispan.tracing.enabled=true -Dotel.service.name=infinispan-server-service -Dotel.exporter.otlp.endpoint=http://localhost:4317 -Dotel.metrics.exporter=none&quot;
./server.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following log is produced when the server starts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;(ForkJoinPool.commonPool-worker-2) [org.infinispan.server.core.telemetry.TelemetryServiceFactory] ISPN000952: OpenTelemetry instance loaded: OpenTelemetrySdk{...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This indicates that the OpenTelemetrySdk is correctly configured.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tracing-from-a-hotrod-client-application&quot;&gt;Tracing from a HotRod client application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any OpenTelemetry tracing context present on HotRot client applications will be automatically propagated by the new Hot Rod v4 client to the server tracing context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, for a client that defines some tracing spans containing cache operations, such as the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MyRestClient {

    public void putSomeValues(RemoteCache cache) {
        Span span = tracer.spanBuilder(&quot;sub-bulk-1&quot;).setSpanKind(SpanKind.CLIENT).startSpan();
        // put the span into the current Context
        try (Scope scope = span.makeCurrent()) {
            cache.put(1, &quot;A&quot;);
            cache.put(2, &quot;B&quot;);
            cache.put(3, &quot;C&quot;);
        } catch (Throwable throwable) {
            span.setStatus(StatusCode.ERROR, &quot;Something bad happened!&quot;);
            span.recordException(throwable);
            throw throwable;
        } finally {
            span.end(); // Cannot set a span after this call
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client span &lt;code&gt;sub-bulk-1&lt;/code&gt; will be correlated to any related server spans, in this case the three put operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Opening the Jaeger console, we can see that client and server spans are correctly aggregated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/tracing-hotrod-client.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/tracing-hotrod-client.png&quot; alt=&quot;Tracing output&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a complete application example here: &lt;a href=&quot;https://github.com/fax4ever/infinispan-play/tree/main/tracing-hotrod-client&quot; class=&quot;bare&quot;&gt;https://github.com/fax4ever/infinispan-play/tree/main/tracing-hotrod-client&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tracing-from-a-rest-client-application&quot;&gt;Tracing from a REST client application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can achieve the same with a REST client by putting manually in the HTTP headers the requests to provide information about the current tracing context using a standard OpenTelemetry instance of &lt;code&gt;W3CTraceContextPropagator&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MyRestClient {

    public void putSomeValues(RestCacheClient cache) {
        Span span = tracer.spanBuilder(&quot;sub-bulk-1&quot;).setSpanKind(SpanKind.CLIENT).startSpan();
        // put the span into the current Context
        try (Scope scope = span.makeCurrent()) {
            putSomeEntries(cache);
        } catch (Throwable throwable) {
            span.setStatus(StatusCode.ERROR, &quot;Something bad happened!&quot;);
            span.recordException(throwable);
            throw throwable;
        } finally {
            span.end(); // Cannot set a span after this call
        }
    }

    private void putSomeEntries(RestCacheClient cache) {
        Map&amp;lt;String, String&amp;gt; contextMap = getContextMap();

        CompletableFuture[] futures = new CompletableFuture[3];

        futures[0] = cache.put(&quot;1&quot;, MediaType.TEXT_PLAIN.toString(),
            RestEntity.create(MediaType.TEXT_PLAIN, &quot;A&quot;), contextMap).toCompletableFuture();
        futures[1] = cache.put(&quot;2&quot;, MediaType.TEXT_PLAIN.toString(),
            RestEntity.create(MediaType.TEXT_PLAIN, &quot;B&quot;), contextMap).toCompletableFuture();
        futures[2] = cache.put(&quot;3&quot;, MediaType.TEXT_PLAIN.toString(),
            RestEntity.create(MediaType.TEXT_PLAIN, &quot;C&quot;), contextMap).toCompletableFuture();

        CompletableFuture.allOf(futures).join();
    }

    public static Map&amp;lt;String, String&amp;gt; getContextMap() {
        HashMap&amp;lt;String, String&amp;gt; result = new HashMap&amp;lt;&amp;gt;();

        // Inject the request with the *current* Context, which contains our current Span.
        W3CTraceContextPropagator.getInstance().inject(Context.current(), result,
          (carrier, key, value) -&amp;gt; carrier.put(key, value));
        return result;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Opening the Jaeger console, you can see that client and server spans are correctly aggregated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/images/blog/tracing-rest-client.png&quot;&gt;&lt;img src=&quot;/assets/images/blog/tracing-rest-client.png&quot; alt=&quot;Tracing output&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a complete application example here: &lt;a href=&quot;https://github.com/fax4ever/infinispan-play/tree/main/tracing-rest-client&quot; class=&quot;bare&quot;&gt;https://github.com/fax4ever/infinispan-play/tree/main/tracing-rest-client&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Fabio Massimo Ercoli</name></author><category term="opentelemetry" /><category term="tracing" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 14.0.0.Dev04</title><link href="https://infinispan.org/blog/2022/07/14/infinispan-14" rel="alternate" type="text/html" title="Infinispan 14.0.0.Dev04" /><published>2022-07-14T14:00:00+02:00</published><updated>2022-07-14T14:00:00+02:00</updated><id>https://infinispan.org/blog/2022/07/14/infinispan-14.0.0.Dev04</id><content type="html" xml:base="https://infinispan.org/blog/2022/07/14/infinispan-14">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 14 development release 04 is here! We are nearing the final release of Infinispan 14 Final, so we want to share a preview of what&amp;#8217;s coming.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hotrod-4-0-protocol&quot;&gt;HotRod 4.0 Protocol&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the addition of the new API that was released in the previous Dev03 build of Infinispan we have had to update the HotRod protocol to satisfy the requirements of that API.
The new protocol changes many of the operations to return additional information to include entry metadata as well as adding new header information to support the OpenTelemetry feature described below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;opentelemetry&quot;&gt;OpenTelemetry&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support OpenTelemetry tracing, for tracing cache operations executed by the Infinispan server, correlated with client requests (using both Hot Rod and REST APIs).
Look out for a separate blog post describing this is in more detail later!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;rest-endpoint&quot;&gt;Rest Endpoint&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New distribution endpoint to provide exposing the data distribution information about the node and cluster. Includes node name, number of entries and total number of entries in the cluster&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resp-server-connector&quot;&gt;RESP Server Connector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The RESP connector is now exposed by default on the single port with the other protocols. If not explicitly configured a Replicated cache is used for its cache.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;iouring-server-compatibility&quot;&gt;IOUring Server Compatibility&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our server can now utilize IOUring for its network socket connections. This requires a compatible Linux kernel to work properly. This can be enabled by setting the JVM property &lt;code&gt;infinispan.server.channel.iouring&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;command-line-interface&quot;&gt;Command Line Interface&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now possible to access the entry value information for data in the cache. Previously only the key information was available.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;multimap-duplicates&quot;&gt;Multimap duplicates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Multimap API has been enhanced to now support duplicate values for a given key. This is an optional configuration as you can still allow only distinct values for a given key.
For example, your data may be &lt;code&gt;A = [1,2,3,3,5]&lt;/code&gt; when duplicates are allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;size-command-optimizations&quot;&gt;Size Command optimizations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Size command has received some optimizations to increase performance under certain circumstances. This includes cases of shared stores and not having expiration for data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, the Infinispan team hope you find the documentation useful and complete. We’d love to hear from you and really value feedback from our community. If you think something is missing from the docs or spot a correction, please get in touch and we’ll get on it straight away.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12388164&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get them from our &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>William Burns</name></author><category term="release" /><category term="development" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 14 indexing &amp;amp; query news</title><link href="https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news" rel="alternate" type="text/html" title="Infinispan 14 indexing &amp;amp; query news" /><published>2022-06-14T20:00:00+02:00</published><updated>2022-06-14T20:00:00+02:00</updated><id>https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news</id><content type="html" xml:base="https://infinispan.org/blog/2022/06/14/infinispan-14-indexing-query-news">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;with the Infinispan 14 development release 03 we introduced improvements on indexing and search capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infinispan-indexing-annotations&quot;&gt;Infinispan indexing annotations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are going to replace Hibernate annotations with Infinispan indexing annotations.
The new annotations can be used in the same way for both embedded and remote queries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are examples of two annotated POJOs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Poem.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Indexed
public class Poem {

   private Author author;
   private String description;
   private Integer year;

   @Embedded(includeDepth = 2, structure = Structure.NESTED)
   public Author getAuthor() {
      return author;
   }

   @Text(projectable = true, analyzer = &quot;whitespace&quot;, termVector = TermVector.WITH_OFFSETS)
   public String getDescription() {
      return description;
   }

   @Basic(projectable = true, sortable = true, indexNullAs = &quot;1800&quot;)
   public Integer getYear() {
      return year;
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Author.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Indexed
public class Author {

   private String name;

   public Author(String name) {
      this.name = name;
   }

   @Keyword(projectable = true, sortable = true, normalizer = &quot;lowercase&quot;, indexNullAs = &quot;unnamed&quot;, norms = false)
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the &lt;code&gt;@Basic&lt;/code&gt; annotation for indexed fields without any special string/text transformation.
When you apply a normalizer to a String field, use the &lt;code&gt;@Keyword&lt;/code&gt; annotation.
When you apply an analyzer to a String field, use the &lt;code&gt;@Text&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new annotations allow you to set a single annotation per indexed field if the field should be &lt;code&gt;sortable&lt;/code&gt; or &lt;code&gt;projectable&lt;/code&gt; and if you want to use an &lt;code&gt;analyzer&lt;/code&gt; or &lt;code&gt;normalizer&lt;/code&gt; on the field.
However, the combination of an attribute and the annotation must be supported, for instance the attribute &lt;code&gt;sortable&lt;/code&gt; cannot be used with the &lt;code&gt;@Text&lt;/code&gt; annotation, since an analyzed field cannot be used to sort the result set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When indexing entities with null values, define a default value with the &lt;code&gt;indexNullAs&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For embedded indexes use the &lt;code&gt;@Embedded&lt;/code&gt; annotation and choose between two structures.
The &lt;code&gt;NESTED&lt;/code&gt; structure preserves the original object relationship structure and the &lt;code&gt;FLATTENED&lt;/code&gt; structure makes the leaf fields multi-valued of the parent entity, so the embedded entity will not be present in the index.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;index-startup-mode&quot;&gt;Index startup mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Indexes can be persistent and cache data can be volatile and vice versa.
You can perform some operations to keep the index consistent with data in the cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We introduced the &lt;code&gt;startup-mode&lt;/code&gt; configuration. Here is an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;distributed-cache&amp;gt;
  &amp;lt;indexing storage=&quot;filesystem&quot; startup-mode=&quot;purge&quot;&amp;gt;
    &amp;lt;!-- Additional indexing configuration goes here. --&amp;gt;
  &amp;lt;/indexing&amp;gt;
&amp;lt;/distributed-cache&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this configuration every time the cache is started, the indexes will be purged.
Possible values are: &lt;code&gt;purge&lt;/code&gt;, &lt;code&gt;reindex&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, and &lt;code&gt;auto&lt;/code&gt;.
When you choose &lt;code&gt;auto&lt;/code&gt; mode, Infinispan decides what is the right operation to run to align cache data and indexes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;index-schema-update&quot;&gt;Index schema update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an advanced feature to be used only in case your model needs to be evolved while continuing querying the cache data without data migrations or re-indexing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a comprehensive guide about when to use schema update instead of migrating or re-indexing the data refer to the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command can be triggered from the HotRod remote administration API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remoteCacheManager.administration().updateIndexSchema(CACHE_NAME);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or using the REST API, targeting the uri:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST .../v2/caches/{cacheName}/search/indexes?action=updateSchema&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or using the Infinispan CLI by running &lt;code&gt;update-schema&lt;/code&gt; on the runtime cache instance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Fabio Massimo Ercoli</name></author><category term="indexing" /><category term="query" /><category term="schema" /><category term="startup" /><category term="annotations" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Infinispan 14.0.0.Dev03</title><link href="https://infinispan.org/blog/2022/05/30/infinispan-14" rel="alternate" type="text/html" title="Infinispan 14.0.0.Dev03" /><published>2022-05-30T14:00:00+02:00</published><updated>2022-05-30T14:00:00+02:00</updated><id>https://infinispan.org/blog/2022/05/30/infinispan-14.0.0.Dev03</id><content type="html" xml:base="https://infinispan.org/blog/2022/05/30/infinispan-14">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispan community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan 14 development release 03 is here! We plan to release Infinispan 14 Final this summer, so we want to share a preview of what&amp;#8217;s coming.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java-11&quot;&gt;Java 11&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan now requires Java 11 to run (it was only needed to build it before). This means we can use and expose all of the great new APIs that were added, such as &lt;code&gt;java.util.concurrent.Flow&lt;/code&gt; which provides a standard interface for all things reactive.
Which brings us to the&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-api&quot;&gt;New API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have finalized the design of our new user-facing API, which brings the following, much-needed, features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a common API for both embedded and remote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clean separation between sync and async APIs, as well as a &lt;a href=&quot;https://smallrye.io/smallrye-mutiny/&quot;&gt;Mutiny&lt;/a&gt; variant which blends beautifully with all the great things happening over in &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a single entry-point to access all of the data-structures that we support (caches, counters, locks, multimaps, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;our own annotations for indexing entity fields (see below for details)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now working on implementing this API for the remote Hot Rod client, while the implementation for embedded will be available in Infinispan 15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jgroups-5&quot;&gt;JGroups 5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrading to Java 11 also allows us to upgrade to JGroups 5.x, which brings a bunch of improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved failure-detection protocols (&lt;code&gt;FD_ALL3&lt;/code&gt;, &lt;code&gt;FD_SOCK2&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Random Early Drop protocol (&lt;code&gt;RED&lt;/code&gt;), which starts dropping messages on the send side when the queue becomes full to prevent message storms caused by unneeded retransmissions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots more.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;grouping&quot;&gt;Grouping&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The grouping API has a small improvement when searching for keys belonging to a group. The old code was inefficient because it iterates over all keys in the local nodes but that was changed in this release by iterating over a single segment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;transactional-caches&quot;&gt;Transactional caches&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internal codeis now non-blocking, reducing the overall threads spawning and making better use of resources when transactions are committed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cross-site-replication&quot;&gt;Cross-site replication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The asynchronous cross-site replication updates are batched in the sender improving the overall resources utilization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jakarta-ee&quot;&gt;Jakarta EE&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaEE is dead. Long-live &lt;a href=&quot;https://jakarta.ee/&quot;&gt;JakartaEE&lt;/a&gt;. Wherever we used to depend on &lt;code&gt;javax&lt;/code&gt; APIs, we now depend on their &lt;code&gt;jakarta&lt;/code&gt; equivalent. We still provide compatibility artifacts for legacy deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hibernate-orm-6-0-compatibility&quot;&gt;Hibernate ORM 6.0 compatibility&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan&amp;#8217;s Hibernate ORM second-level cache (2LC) implementation has been upgraded to work with Hibernate 6.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;indexing-and-query&quot;&gt;Indexing and Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lots has been happening in the land of indexing and querying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upgraded Hibernate Search to 6.1 and Lucene 8.11.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brand-new annotations for indexing annotations in place of the old Hibernate annotations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schema index update to acquire ProtoBuf schema backward-compatible changes without touching the pre-existing index data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The removal of the &lt;code&gt;@ProtoDoc&lt;/code&gt; annotation to wrap indexing annotations for ProtoBuf generation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New indexing startup mode configuration, to trigger purge or reindex automatically when the cache starts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support pagination for unbounded result size queries with the HotRod client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support query parameters for full-text analyzed fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support normalizers with the HotRod client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve the Hybrid query system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;micrometer&quot;&gt;Micrometer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve replaced our use of SmallRye Metrics (an implementation of Microprofile Metrics), with the much better Micrometer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RESP&lt;/code&gt; endpoint: a Redis-compatible endpoint connector (implementing the RESP 3 protocol) with support for a subset of commands: &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;del&lt;/code&gt;, &lt;code&gt;mget&lt;/code&gt;, &lt;code&gt;mset&lt;/code&gt;, &lt;code&gt;incr&lt;/code&gt;, &lt;code&gt;decr&lt;/code&gt;, &lt;code&gt;publish&lt;/code&gt;, &lt;code&gt;subscribe&lt;/code&gt;, &lt;code&gt;auth&lt;/code&gt;, &lt;code&gt;ping&lt;/code&gt;. The connector integrates with our security and protocol auto-detections, so that it is easily usable from our single-port endpoint. The implemented commands should be enough for basic usage. If you would like to see more, reach out via our community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for FIPS environments (PKCS#11)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for masked and external credentials&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;console&quot;&gt;Console&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The console now sports a cache-creation wizard: a feature-driven approach to configuring caches just the way you need them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, the Infinispan team hope you find the documentation useful and complete. We’d love to hear from you and really value feedback from our community. If you think something is missing from the docs or spot a correction, please get in touch and we’ll get on it straight away.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12383368&quot;&gt;release notes&lt;/a&gt; to see what has changed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other-releases&quot;&gt;Other releases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve also just recently updated our stable releases with important fixes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12385251&quot;&gt;13.0.10.Final release notes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12379804&quot;&gt;12.1.12.Final release notes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get them from our &lt;a href=&quot;https://infinispan.org/download/&quot;&gt;download page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="development" /><summary type="html">Dear Infinispan community,</summary></entry><entry><title type="html">Crucial DSO server</title><link href="https://infinispan.org/blog/2022/04/07/crucial-dso" rel="alternate" type="text/html" title="Crucial DSO server" /><published>2022-04-07T14:00:00+02:00</published><updated>2022-04-07T14:00:00+02:00</updated><id>https://infinispan.org/blog/2022/04/07/crucial-dso</id><content type="html" xml:base="https://infinispan.org/blog/2022/04/07/crucial-dso">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally, an object-relational mapping (ORM) converts the data between the application and storage tiers. The ORM materializes the frontier between the two tiers, and it reduces the coupling. However, it also forces to repeatedly convert the objects between their in-memory and their serialized representations back and forth. This negatively impacts performance and increases execution costs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/crucial-project/dso&quot;&gt;Crucial DSO&lt;/a&gt; is a general-purpose synchronization and data sharing framework. With DSO, instead of fetching objects from storage, the application directly calls them. DSO ensures that the objects are persisted and shared consistently among several client machines.
DSO is built on top of Infinispan and leverages its extensibility.
The work was done in the context of the &lt;a href=&quot;https://cloudbutton.eu&quot;&gt;CloudButton&lt;/a&gt; project, which aims to build a serverless platform for quickly deploying
workloads to the cloud, but the advantages are available to everyone using Infinispan!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;programming-with-dso&quot;&gt;Programming with DSO&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSO offers several client-side programming libraries. The most complete one is for the Java language. To declare a DSO object in Java, the programmer uses the &lt;code&gt;@Shared&lt;/code&gt; keyword on the field of an object. As an example, consider the following two classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example.py&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class Hero {
    @Shared Room location;
}

class Room {
    Treasure loot();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Hero&lt;/code&gt; class contains a &lt;code&gt;location&lt;/code&gt; field annotated with &lt;code&gt;@Shared&lt;/code&gt;. This tells DSO to push the location to the storage tier, allowing several instances of Hero on several application machines to access the same location object transparently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSO ensures that the objects are strongly consistent over time. In the example above, this means for instance that if two heroes stand in the same room, only one of them may loot the treasure. More precisely, the synchronization contract of every DSO object &lt;code&gt;o&lt;/code&gt; is that &lt;code&gt;o&lt;/code&gt; is atomic, aka. linearizable. In Java, this is equivalent to guarding every method &lt;code&gt;m&lt;/code&gt; of some object &lt;code&gt;o&lt;/code&gt; with &lt;code&gt;synchronized(o) { o.m }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSO includes a library of shared objects (counter, integer, list, maps, barrier, etc.).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSO follows a standard client-server architecture.
The server component is built as an Infinispan Server extension. To quickly setup a DSO-enabled Infinispan Server on Kubernetes using the Infinispan Operator, we can use the &lt;a href=&quot;https://infinispan.org/docs/infinispan-operator/2.2.x/operator.html#deploying-code&quot;&gt;code deployment capabilities&lt;/a&gt;. Until an official release of DSO is published, you will need to build it yourself and make the generated artifacts available from a local Maven repository or a simple web server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;dso.yaml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: infinispan.org/v1
kind: Infinispan
metadata:
  name: infinispan
spec:
  replicas: 2
  dependencies:
    artifacts:
      - url: https://repo1.maven.org/maven2/com/fasterxml/uuid/java-uuid-generator/3.3.0/java-uuid-generator-3.3.0.jar
        type: file
      - url: https://repo1.maven.org/maven2/com/google/guava/guava/18.0/guava-18.0.jar
        type: file
      - url: http://example.com/dso-core-2.0.jar
        type: file
      - url: http://example.com/dso-server-2.0.jar
        type: file
  service:
    type: DataGrid&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(We will soon make a bundle available for simpler installation)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the server starts, you should see the following log:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO  (main) [org.crucial.dso.Factory] Factory[Cache &apos;__dso&apos;@kashyyyk-4890] Created
INFO  (main) [org.crucial.dso.Factory] Factory singleton  is Factory[Cache &apos;__dso&apos;@kashyyyk-4890]
INFO  (main) [org.infinispan.CONTAINER] DSO cache initialized&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Head over to Crucial&amp;#8217;s &lt;a href=&quot;https://github.com/crucial-project/dso&quot;&gt;DSO&lt;/a&gt; page for code, examples and more details about this exciting project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Tristan Tarrant</name></author><category term="crucial" /><category term="dso" /><category term="cloudbutton" /><summary type="html">Traditionally, an object-relational mapping (ORM) converts the data between the application and storage tiers. The ORM materializes the frontier between the two tiers, and it reduces the coupling. However, it also forces to repeatedly convert the objects between their in-memory and their serialized representations back and forth. This negatively impacts performance and increases execution costs.</summary></entry><entry><title type="html">.Net Core Client version 0.0.3-beta</title><link href="https://infinispan.org/blog/2022/03/22/dotnetcore-0-0-3-beta" rel="alternate" type="text/html" title=".Net Core Client version 0.0.3-beta" /><published>2022-03-22T13:00:00+01:00</published><updated>2022-03-22T13:00:00+01:00</updated><id>https://infinispan.org/blog/2022/03/22/dotnet-core-0.0.3-beta</id><content type="html" xml:base="https://infinispan.org/blog/2022/03/22/dotnetcore-0-0-3-beta">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dear Infinispanners and .NET Core lovers,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we&amp;#8217;re pleased to annouce the new release of the .NET Core client.
Release 0.0.3-beta comes with a bunch of new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;remote event listener.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cluster failover configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS with server cert verification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;some new hotrod operations. &lt;a href=&quot;https://rigazilla.github.io/Infinispan.Hotrod.Core/html/class_infinispan_1_1_hotrod_1_1_core_1_1_cache.html&quot;&gt;(Check if your favourite Hotrod op is in!)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good starting point could be the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/tree/main/Infinispan.Hotrod.Application&quot;&gt;sample application&lt;/a&gt;.
Documentation is growing up, temporarily placed &lt;a href=&quot;https://rigazilla.github.io/Infinispan.Hotrod.Core/html/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know your thoughts. A good place to share them is the &lt;a href=&quot;https://github.com/infinispan/Infinispan.Hotrod.Core/issues&quot;&gt;issues&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Infinispan Team&lt;/p&gt;
&lt;/div&gt;</content><author><name>Vittorio Rigamonti</name></author><category term="hotrod" /><category term=".Net Core" /><category term="client" /><category term="C#" /><category term="listener" /><category term="cluster failover" /><summary type="html">Dear Infinispanners and .NET Core lovers,</summary></entry></feed>